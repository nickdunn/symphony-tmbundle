<?xml version="1.0"?>
<class type="class" name="Field" handle="field">
  <package name="toolkit" handle="toolkit"/>
  <location line="13">lib/toolkit/class.field.php</location>
  <modifiers>
    <modifier>public</modifier>
  </modifiers>
  <description>
    <p>The Field class represents a Symphony Field object. Fields are the building
 blocks for Sections. All fields instances are unique and can only be used once
 in a Symphony install. Fields have their own field table which records where
 instances of this field type have been used in other sections and their settings.
 They also spinoff other <code>tbl_entry_data_{id}</code> tables that actually store data for
 entries particular to this field.</p>
  </description>
  <constants>
    <constant name="__DUPLICATE__" type="integer" value="300">
      <modifiers>
        <modifier>private</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="45">lib/toolkit/class.field.php</location>
      <description>
        <p>If there already is an instance of this field in this section and
 the mustBeUnique function returns true, this will be returned</p>
      </description>
    </constant>
    <constant name="__ERROR_CUSTOM__" type="integer" value="400">
      <modifiers>
        <modifier>private</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="52">lib/toolkit/class.field.php</location>
      <description>
        <p>Fields can returned this is an error occurred when saving the
 field's settings that doesn't fit another Field constant</p>
      </description>
    </constant>
    <constant name="__ERROR__" type="integer" value="150">
      <modifiers>
        <modifier>private</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="25">lib/toolkit/class.field.php</location>
      <description>
        <p>If an error occurring when saving a section because of this field,
 this will be returned</p>
      </description>
    </constant>
    <constant name="__FIELD_ALL__" type="integer" value="1000">
      <modifiers>
        <modifier>private</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="88">lib/toolkit/class.field.php</location>
      <description>
        <p>Used by the FieldManager to just return all fields</p>
      </description>
    </constant>
    <constant name="__FILTERABLE_ONLY__" type="integer" value="800">
      <modifiers>
        <modifier>private</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="76">lib/toolkit/class.field.php</location>
      <description>
        <p>Used by the FieldManager to return fields that can be filtered</p>
      </description>
    </constant>
    <constant name="__INVALID_FIELDS__" type="integer" value="220">
      <modifiers>
        <modifier>private</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="38">lib/toolkit/class.field.php</location>
      <description>
        <p>If a value for a setting is invalid, this will be returned</p>
      </description>
    </constant>
    <constant name="__INVALID_QNAME__" type="integer" value="500">
      <modifiers>
        <modifier>private</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="58">lib/toolkit/class.field.php</location>
      <description>
        <p>If the field name is not a valid QName, this error will be returned</p>
      </description>
    </constant>
    <constant name="__MISSING_FIELDS__" type="integer" value="200">
      <modifiers>
        <modifier>private</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="32">lib/toolkit/class.field.php</location>
      <description>
        <p>When saving a section, if a value that is required is missing,
 this will be returned</p>
      </description>
    </constant>
    <constant name="__OK__" type="integer" value="100">
      <modifiers>
        <modifier>private</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="18">lib/toolkit/class.field.php</location>
      <description>
        <p>The desired result when creating a field in the section editor</p>
      </description>
    </constant>
    <constant name="__TOGGLEABLE_ONLY__" type="integer" value="600">
      <modifiers>
        <modifier>private</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="64">lib/toolkit/class.field.php</location>
      <description>
        <p>Used by the FieldManager to return fields that can be toggled</p>
      </description>
    </constant>
    <constant name="__UNFILTERABLE_ONLY__" type="integer" value="900">
      <modifiers>
        <modifier>private</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="82">lib/toolkit/class.field.php</location>
      <description>
        <p>Used by the FieldManager to return fields that can't be filtered</p>
      </description>
    </constant>
    <constant name="__UNTOGGLEABLE_ONLY__" type="integer" value="700">
      <modifiers>
        <modifier>private</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="70">lib/toolkit/class.field.php</location>
      <description>
        <p>Used by the FieldManager to return fields that can't be toggled</p>
      </description>
    </constant>
  </constants>
  <fields>
    <field name="$Database" type="MySQL">
      <modifiers>
        <modifier>protected</modifier>
      </modifiers>
      <location line="126">lib/toolkit/class.field.php</location>
      <description>
        <p>A pointer to the <code>Symphony::Database()</code>.</p>
      </description>
      <tags>
        <tag group="Deprecated"><description><p>This is deprecated and will be removed in the next major version of Symphony. The preferred way to access the Database object is via <code>Symphony::Database()</code></p></description></tag>
      </tags>
    </field>
    <field name="$_Parent" type="mixed">
      <modifiers>
        <modifier>protected</modifier>
      </modifiers>
      <location line="107">lib/toolkit/class.field.php</location>
      <description>
        <p>The class that initialised the Field, usually the FieldManager</p>
      </description>
    </field>
    <field name="$_engine" type="Symphony">
      <modifiers>
        <modifier>protected</modifier>
      </modifiers>
      <location line="116">lib/toolkit/class.field.php</location>
      <description>
        <p>An instance of the Symphony class, either Frontend or Administration</p>
      </description>
      <tags>
        <tag group="Deprecated"><description><p>This will be removed in the next major version of Symphony. The preferred way to access the Symphony instance is via <code>Symphony::Engine()</code></p></description></tag>
      </tags>
    </field>
    <field name="$_fields" type="array" value="array()">
      <modifiers>
        <modifier>protected</modifier>
      </modifiers>
      <location line="102">lib/toolkit/class.field.php</location>
      <description>
        <p>An associative array of the settings for this Field instance</p>
      </description>
      <tags>
        <tag group="Deprecated"><description><p>This variable will be renamed to <code>$_settings</code> in the next major release.</p></description></tag>
      </tags>
    </field>
    <field name="$_key" type="integer">
      <modifiers>
        <modifier>protected</modifier>
      </modifiers>
      <location line="94">lib/toolkit/class.field.php</location>
      <description>
        <p>Used to manage the joins when this field used in a datasource</p>
      </description>
    </field>
    <field name="$_required" type="boolean" value="false">
      <modifiers>
        <modifier>protected</modifier>
      </modifiers>
      <location line="132">lib/toolkit/class.field.php</location>
      <description>
        <p>Whether this field is required inherently, defaults to false.</p>
      </description>
    </field>
    <field name="$_showassociation" type="boolean" value="false">
      <modifiers>
        <modifier>protected</modifier>
      </modifiers>
      <location line="149">lib/toolkit/class.field.php</location>
      <description>
        <p>Whether this field has an association that should be shown on
 the Publish Index. This does not mean that it will be, but just
 that this field has the ability too. Defaults to false.</p>
      </description>
    </field>
    <field name="$_showcolumn" type="boolean" value="true">
      <modifiers>
        <modifier>protected</modifier>
      </modifiers>
      <location line="141">lib/toolkit/class.field.php</location>
      <description>
        <p>Whether this field can be viewed on the entries tabletable. Note
 that this is not the same variable as the one set when saving
 a field in the section editor, rather just the if the field has
 the ability to be shown. Defaults to true.</p>
      </description>
    </field>
  </fields>
  <methods>
    <method name="__construct" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="parent" type="mixed"/>
      </parameters>
      <location line="158">lib/toolkit/class.field.php</location>
      <description>
        <p>Construct a new instance of this field.</p>
      </description>
      <tags>
        <tag group="Parameters" name="parent"><description><p>The class that created this Field object, usually the FieldManager, passed by reference.</p></description></tag>
      </tags>
    </method>
    <method name="allowDatasourceOutputGrouping" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="282">lib/toolkit/class.field.php</location>
      <description>
        <p>Test whether this field supports data-source output grouping. This
 default implementation prohibits grouping. Data-source grouping allows
 clients of this field to group the xml output according to this field.
 Subclasses should override this if grouping is supported.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>true if this field does support data-source grouping, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="allowDatasourceParamOutput" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="307">lib/toolkit/class.field.php</location>
      <description>
        <p>Test whether this field supports data-source parameter output. This
 default implementation prohibits parameter output. Data-source
 parameter output allows this field to be provided as a parameter
 to other data-sources or XSLT. Subclasses should override this if
 parameter output is supported.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>true if this supports data-source parameter output, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="appendFormattedElement" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="wrapper" type="XMLElement" package="toolkit" class="XMLElement"/>
        <parameter name="data" type="array"/>
        <parameter name="encode" type="boolean"/>
        <parameter name="mode" type="string"/>
        <parameter name="entry_id" type="integer"/>
      </parameters>
      <location line="1009">lib/toolkit/class.field.php</location>
      <description>
        <p>Append the formatted xml output of this field as utilized as a data source.</p>
      </description>
      <tags>
        <tag group="Parameters" name="wrapper"><description><p>the xml element to append the xml representation of this to.</p></description></tag>
        <tag group="Parameters" name="data"><description><p>the current set of values for this field. the values are structured as for displayPublishPanel.</p></description></tag>
        <tag group="Parameters" name="encode"><description><p>(optional) flag as to whether this should be html encoded prior to output. this defaults to false.</p></description></tag>
        <tag group="Parameters" name="mode"><description><p>A field can provide ways to output this field's data. For instance a mode could be 'items' or 'full' and then the function would display the data in a different way depending on what was selected in the datasource included elements.</p></description></tag>
        <tag group="Parameters" name="entry_id"><description><p>(optional) the identifier of this field entry instance. defaults to null.</p></description></tag>
      </tags>
    </method>
    <method name="appendRequiredCheckbox" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="wrapper" type="XMLElement" package="toolkit" class="XMLElement"/>
      </parameters>
      <location line="602">lib/toolkit/class.field.php</location>
      <description>
        <p>Append and set a labelled html checkbox to the input xml element if this
 field is set as a required field.</p>
      </description>
      <tags>
        <tag group="Parameters" name="wrapper"><description><p>the parent xml element to append the constructed html checkbox to if necessary.</p></description></tag>
      </tags>
    </method>
    <method name="appendShowAssociationCheckbox" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="wrapper" type="XMLElement" package="toolkit" class="XMLElement"/>
        <parameter name="help" type="string"/>
      </parameters>
      <location line="657">lib/toolkit/class.field.php</location>
      <description>
        <p>Append the show association html widget to the input parent xml element. This
 widget allows fields that provide linking to hide or show the column in the linked
 section, similar to how the Show Column functionality works, but for the linked
 section.</p>
      </description>
      <tags>
        <tag group="Parameters" name="wrapper"><description><p>the parent xml element to append the checkbox to.</p></description></tag>
        <tag group="Parameters" name="help"><description><p>(optional) a help message to show below the checkbox.</p></description></tag>
      </tags>
    </method>
    <method name="appendShowColumnCheckbox" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="wrapper" type="XMLElement" package="toolkit" class="XMLElement"/>
      </parameters>
      <location line="627">lib/toolkit/class.field.php</location>
      <description>
        <p>Append the show column html widget to the input parent xml element. This
 displays a column in the entries table or not.</p>
      </description>
      <tags>
        <tag group="Parameters" name="wrapper"><description><p>the parent xml element to append the checkbox to.</p></description></tag>
      </tags>
    </method>
    <method name="buildDSRetrievalSQL" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="data" type="array"/>
        <parameter name="joins" type="string"/>
        <parameter name="where" type="string"/>
        <parameter name="andOperation" type="boolean"/>
      </parameters>
      <location line="899">lib/toolkit/class.field.php</location>
      <description>
        <p>Construct the SQL statement fragments to use to retrieve the data of this
 field when utilized as a data source.</p>
      </description>
      <tags>
        <tag group="Parameters" name="data"><description><p>the supplied form data to use to construct the query from</p></description></tag>
        <tag group="Parameters" name="joins"><description><p>the join sql statement fragment to append the additional join sql to.</p></description></tag>
        <tag group="Parameters" name="where"><description><p>the where condition sql statement fragment to which the additional where conditions will be appended.</p></description></tag>
        <tag group="Parameters" name="andOperation"><description><p>(optional) true if the values of the input data should be appended as part of the where condition. this defaults to false.</p></description></tag>
        <tag group="Returns"><description><p>true if the construction of the sql was successful, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="buildDSRetrivalSQL" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="data" type="mixed"/>
        <parameter name="joins" type="mixed"/>
        <parameter name="where" type="mixed"/>
        <parameter name="andOperation" type="bool"/>
      </parameters>
      <location line="1196">lib/toolkit/class.field.php</location>
      <tags>
        <tag group="Deprecated"><description><p>This function name has a typo that has withstood many versions of Symphony. The correct function is <code>$this-&gt;buildDSRetrievalSQL</code>.</p></description></tag>
      </tags>
    </method>
    <method name="buildFormatterSelect" return="XMLElement">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="selected" type="string"/>
        <parameter name="name" type="string"/>
        <parameter name="label_value" type="string"/>
      </parameters>
      <location line="535">lib/toolkit/class.field.php</location>
      <description>
        <p>Construct the html widget for selecting a text formatter for this field.</p>
      </description>
      <tags>
        <tag group="Parameters" name="selected"><description><p>(optional) the currently selected text formatter name if there is one. this defaults to null.</p></description></tag>
        <tag group="Parameters" name="name"><description><p>(optional) the name of this field in the form. this is optional and defaults to "fields[format]".</p></description></tag>
        <tag group="Parameters" name="label_value"><description><p>the default label for the widget to construct. if null is passed in then this defaults to the localization of "Formatting".</p></description></tag>
        <tag group="Returns"><description><p>An XMLElement representing a <code>&lt;select&gt;</code> field containing the options.</p></description></tag>
      </tags>
    </method>
    <method name="buildLocationSelect" return="XMLElement">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="selected" type="mixed"/>
        <parameter name="name" type="string"/>
        <parameter name="label_value" type="string"/>
        <parameter name="selection" type="string"/>
      </parameters>
      <location line="507">lib/toolkit/class.field.php</location>
      <description>
        <p>Build the location select widget. This widget allows users to select
 whether this field will appear in the main content column or in the sidebar
 when creating a new entry.</p>
      </description>
      <tags>
        <tag group="Parameters" name="selection"><description><p>(optional) the currently selected location, if there is one. this defaults to null.</p></description></tag>
        <tag group="Parameters" name="name"><description><p>(optional) the name of this field. this is optional and defaults to <code>fields[location]</code>.</p></description></tag>
        <tag group="Parameters" name="label_value"><description><p>(optional) any predefined label for this widget. this is an optional argument that defaults to null.</p></description></tag>
        <tag group="Returns"><description><p>An XMLElement representing a <code>&lt;select&gt;</code> field containing the options.</p></description></tag>
      </tags>
    </method>
    <method name="buildSortingSQL" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="joins" type="string"/>
        <parameter name="where" type="string"/>
        <parameter name="sort" type="string"/>
        <parameter name="order" type="string"/>
      </parameters>
      <location line="958">lib/toolkit/class.field.php</location>
      <description>
        <p>Build the SQL command to append to the default query to enable
 sorting of this field. By default this will sort the results by
 the entry id in ascending order.</p>
      </description>
      <tags>
        <tag group="Parameters" name="joins"><description><p>the join element of the query to append the custom join sql to.</p></description></tag>
        <tag group="Parameters" name="where"><description><p>the where condition of the query to append to the existing where clause.</p></description></tag>
        <tag group="Parameters" name="sort"><description><p>the existing sort component of the sql query to append the custom sort sql code to.</p></description></tag>
        <tag group="Parameters" name="order"><description><p>(optional) an optional sorting direction. this defaults to ascending. if this is declared either 'random' or 'rand' then a random sort is applied.</p></description></tag>
      </tags>
    </method>
    <method name="buildSummaryBlock" return="XMLElement">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="errors" type="array"/>
      </parameters>
      <location line="478">lib/toolkit/class.field.php</location>
      <description>
        <p>Construct the html block to display a summary of this field, which is the field
 Label and it's location within the section. Any error messages generated are 
 appended to the optional input error array. This function calls
 <code>buildLocationSelect</code> once it is completed</p>
      </description>
      <tags>
        <tag group="See Also" package="" class="buildLocationSelect" path="buildLocationSelect()">buildLocationSelect()</tag>
        <tag group="Parameters" name="errors"><description><p>(optional) an array to append html formatted error messages to. this defaults to null.</p></description></tag>
        <tag group="Returns"><description><p>the root xml element of the html display of this.</p></description></tag>
      </tags>
    </method>
    <method name="buildValidationSelect" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="wrapper" type="XMLElement" package="toolkit" class="XMLElement"/>
        <parameter name="selected" type="mixed"/>
        <parameter name="name" type="string"/>
        <parameter name="type" type="string"/>
        <parameter name="selection" type="string"/>
      </parameters>
      <location line="578">lib/toolkit/class.field.php</location>
      <description>
        <p>Append a validator selector to a given XMLElement. Note that this 
 function differs from the other two similarly named build functions in 
 that it takes an XMLElement to append the Validator to as a parameter,
 and does not return anything.</p>
      </description>
      <tags>
        <tag group="Parameters" name="wrapper"><description><p>the parent element to append the XMLElement of the Validation select to, passed by reference.</p></description></tag>
        <tag group="Parameters" name="selection"><description><p>(optional) the current validator selection if there is one. defaults to null if there isn't.</p></description></tag>
        <tag group="Parameters" name="name"><description><p>(optional) the form element name of this field. this defaults to "fields[validator]".</p></description></tag>
        <tag group="Parameters" name="type"><description><p>(optional) the type of input for the validation to apply to. this defaults to 'input' but also accepts 'upload'.</p></description></tag>
      </tags>
    </method>
    <method name="canFilter" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="221">lib/toolkit/class.field.php</location>
      <description>
        <p>Test whether this field can be filtered. This default implementation
 prohibits filtering. Filtering allows the xml output results to be limited
 according to an input parameter. Subclasses should override this if
 filtering is supported.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>true if this can be filtered, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="canImport" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="235">lib/toolkit/class.field.php</location>
      <description>
        <p>Test whether this field can be imported. This default implementation
 prohibits importing. Subclasses should override this is importing is
 supported.</p>
      </description>
      <tags>
        <tag group="Deprecated"><description><p>This function will be removed in the next major release. It is unused by Symphony.</p></description></tag>
        <tag group="Returns"><description><p>true if this can be imported, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="canPrePopulate" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="246">lib/toolkit/class.field.php</location>
      <description>
        <p>Test whether this field can be prepopulated with data. This default
 implementation does not support pre-population and, thus, returns false.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>true if this can be pre-populated, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="canShowTableColumn" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="171">lib/toolkit/class.field.php</location>
      <description>
        <p>Test whether this field can show the table column.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>true if this can, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="canToggle" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="182">lib/toolkit/class.field.php</location>
      <description>
        <p>Test whether this field can be toggled using the With Selected menu
 on the Publish Index.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>true if it can be toggled, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="checkFields" return="integer">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="errors" type="array"/>
        <parameter name="checkForDuplicates" type="boolean"/>
      </parameters>
      <location line="691">lib/toolkit/class.field.php</location>
      <description>
        <p>Check the field's settings to ensure they are valid on the section
 editor</p>
      </description>
      <tags>
        <tag group="Parameters" name="errors"><description><p>the array to populate with the errors found.</p></description></tag>
        <tag group="Parameters" name="checkForDuplicates"><description><p>(optional) if set to true, duplicate Field name's in the same section will be flagged as errors. Defaults to true.</p></description></tag>
        <tag group="Returns"><description><p>returns the status of the checking. if errors has been populated with any errors <code>self::__ERROR__</code>, <code>self::__OK__</code> otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="checkPostFieldData" return="integer">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="data" type="array"/>
        <parameter name="message" type="string"/>
        <parameter name="entry_id" type="integer"/>
      </parameters>
      <location line="797">lib/toolkit/class.field.php</location>
      <description>
        <p>Check the field data that has been posted from a form. This will set the
 input message to the error message or to null if there is none. Any existing
 message value will be overwritten.</p>
      </description>
      <tags>
        <tag group="Parameters" name="data"><description><p>the input data to check.</p></description></tag>
        <tag group="Parameters" name="message"><description><p>the place to set any generated error message. any previous value for this variable will be overwritten.</p></description></tag>
        <tag group="Parameters" name="entry_id"><description><p>(optional) the optional id of this field entry instance. this defaults to null.</p></description></tag>
        <tag group="Returns"><description><p><code>self::__MISSING_FIELDS__</code> if there are any missing required fields, <code>self::__OK__</code> otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="cleanValue" return="string">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="value" type="mixed"/>
      </parameters>
      <location line="345">lib/toolkit/class.field.php</location>
      <description>
        <p>Clean the input value using html entity encode and the database specific
 clean methods.</p>
      </description>
      <tags>
        <tag group="Parameters" name="value"><description><p>the value to clean.</p></description></tag>
        <tag group="Returns"><description><p>the cleaned value.</p></description></tag>
      </tags>
    </method>
    <method name="commit" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="1036">lib/toolkit/class.field.php</location>
      <description>
        <p>Commit the settings of this field from the section editor to
 create an instance of this field in a section.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>true if the commit was successful, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="createSectionAssociation" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="parent_section_id" type="integer"/>
        <parameter name="child_field_id" type="integer"/>
        <parameter name="parent_field_id" type="integer"/>
        <parameter name="show_association" type="boolean"/>
      </parameters>
      <location line="1115">lib/toolkit/class.field.php</location>
      <description>
        <p>Create an association between a section and a field.</p>
      </description>
      <tags>
        <tag group="Parameters" name="parent_section_id"><description><p>The linked section id.</p></description></tag>
        <tag group="Parameters" name="child_field_id"><description><p>The field ID of the field that is creating the association</p></description></tag>
        <tag group="Parameters" name="parent_field_id"><description><p>(optional) The field ID of the linked field in the linked section</p></description></tag>
        <tag group="Parameters" name="show_association"><description><p>(optional) Whether of not the link should be shown on the entries tableof the linked section. This defaults to true.</p></description></tag>
        <tag group="Returns"><description><p>true if the association was successfully made, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="createTable" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="1070">lib/toolkit/class.field.php</location>
      <description>
        <p>The default field table construction method. This constructs the bare
 minimum set of columns for a valid field table. Subclasses are expected
 to overload this method to create a table structure that contains
 additional columns to store the specific data created by the field.</p>
      </description>
    </method>
    <method name="displayDatasourceFilterPanel" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="wrapper" type="XMLElement" package="toolkit" class="XMLElement"/>
        <parameter name="data" type="mixed"/>
        <parameter name="errors" type="mixed"/>
        <parameter name="fieldnamePrefix" type="mixed"/>
        <parameter name="fieldnamePostfix" type="mixed"/>
        <parameter name="fieldNamePrefix" type="string"/>
        <parameter name="fieldNameSuffix" type="string"/>
      </parameters>
      <location line="849">lib/toolkit/class.field.php</location>
      <description>
        <p>Display the default data-source filter panel.</p>
      </description>
      <tags>
        <tag group="Parameters" name="wrapper"><description><p>the input XMLElement to which the display of this will be appended.</p></description></tag>
        <tag group="Parameters" name="data"><description><p>(optional) the input data. this defaults to null.</p></description></tag>
        <tag group="Parameters" name="errors"><description><p>(optional) the input error collection. this defaults to null.</p></description></tag>
        <tag group="Parameters" name="fieldNamePrefix"><description><p>the prefix to apply to the display of this.</p></description></tag>
        <tag group="Parameters" name="fieldNameSuffix"><description><p>the suffix to apply to the display of this.</p></description></tag>
      </tags>
    </method>
    <method name="displayPublishPanel" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="wrapper" type="XMLElement" package="toolkit" class="XMLElement"/>
        <parameter name="data" type="array"/>
        <parameter name="flagWithError" type="mixed"/>
        <parameter name="fieldnamePrefix" type="string"/>
        <parameter name="fieldnamePostfix" type="mixed"/>
        <parameter name="entry_id" type="integer"/>
        <parameter name="fieldnameSuffix" type="string"/>
      </parameters>
      <location line="779">lib/toolkit/class.field.php</location>
      <description>
        <p>Display the publish panel for this field. The display panel is the
 interface shown to Authors that allow them to input data into this 
 field for an Entry.</p>
      </description>
      <tags>
        <tag group="Parameters" name="wrapper"><description><p>the xml element to append the html defined user interface to this field.</p></description></tag>
        <tag group="Parameters" name="data"><description><p>(optional) any existing data that has been supplied for this field instance. this is encoded as an array of columns, each column maps to an array of row indexes to the contents of that column. this defaults to null.</p></description></tag>
        <tag group="Parameters" name="flagWithError"><description><p>(optional) flag with error defaults to null.</p></description></tag>
        <tag group="Parameters" name="fieldnamePrefix"><description><p>(optional) the string to be prepended to the display of the name of this field. this defaults to null.</p></description></tag>
        <tag group="Parameters" name="fieldnameSuffix"><description><p>(optional) the string to be appended to the display of the name of this field. this defaults to null.</p></description></tag>
        <tag group="Parameters" name="entry_id"><description><p>(optional) the entry id of this field. this defaults to null.</p></description></tag>
      </tags>
    </method>
    <method name="displaySettingsPanel" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="wrapper" type="XMLElement" package="toolkit" class="XMLElement"/>
        <parameter name="errors" type="mixed"/>
      </parameters>
      <location line="458">lib/toolkit/class.field.php</location>
      <description>
        <p>Display the default settings panel, calls the <code>buildSummaryBlock</code>
 function after basic field settings are added to the wrapper.</p>
      </description>
      <tags>
        <tag group="See Also" package="" class="buildSummaryBlock" path="buildSummaryBlock()">buildSummaryBlock()</tag>
        <tag group="Parameters" name="wrapper"><description><p>the input XMLElement to which the display of this will be appended.</p></description></tag>
        <tag group="Parameters" name="errors"><description><p>(optional) the input error collection. this defaults to null.</p></description></tag>
      </tags>
    </method>
    <method name="entryDataCleanup" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="entry_id" type="integer"/>
        <parameter name="data" type="array"/>
      </parameters>
      <location line="1094">lib/toolkit/class.field.php</location>
      <description>
        <p>Remove the entry data of this field from the database.</p>
      </description>
      <tags>
        <tag group="Parameters" name="entry_id"><description><p>the id of the entry to delete.</p></description></tag>
        <tag group="Parameters" name="data"><description><p>(optional) The entry data provided for fields to do additional cleanup This is an optional argument and defaults to null.</p></description></tag>
        <tag group="Returns"><description><p>true if the cleanup was successful, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="fetchAssociatedEntryCount" return="void|integer">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="value" type="mixed"/>
      </parameters>
      <location line="1179">lib/toolkit/class.field.php</location>
      <description>
        <p>Fetch the count of the associate entries for the input value. This default
 implementation does nothing.</p>
      </description>
      <tags>
        <tag group="Parameters" name="value"><description><p>the value to find the associated entry count for.</p></description></tag>
        <tag group="Returns"><description><p>this default implementation returns void. overriding implementations should return a number.</p></description></tag>
      </tags>
    </method>
    <method name="fetchAssociatedEntryIDs" return="void|array">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="value" type="mixed"/>
      </parameters>
      <location line="1190">lib/toolkit/class.field.php</location>
      <description>
        <p>Accessor to the ids associated with this field instance.</p>
      </description>
      <tags>
        <tag group="Parameters" name="value"><description><p>the value to find the associated entry ids for.</p></description></tag>
        <tag group="Returns"><description><p>this default implementation returns void. overriding implementations should return an array of the associated entry ids.</p></description></tag>
      </tags>
    </method>
    <method name="fetchAssociatedEntrySearchValue" return="array">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="data" type="array"/>
        <parameter name="field_id" type="integer"/>
        <parameter name="parent_entry_id" type="integer"/>
      </parameters>
      <location line="1165">lib/toolkit/class.field.php</location>
      <description>
        <p>Accessor to the associated entry search value for this field
 instance. This default implementation simply returns the input
 data argument.</p>
      </description>
      <tags>
        <tag group="Parameters" name="data"><description><p>the data from which to construct the associated search entry value.</p></description></tag>
        <tag group="Parameters" name="field_id"><description><p>(optional) an optional id of the associated field? this defaults to null.</p></description></tag>
        <tag group="Parameters" name="parent_entry_id"><description><p>(optional) an optional parent identifier of the associated field entry? this defaults to null.</p></description></tag>
        <tag group="Returns"><description><p>the associated entry search value. this implementation returns the input data argument.</p></description></tag>
      </tags>
    </method>
    <method name="fetchIncludableElements" return="array">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="866">lib/toolkit/class.field.php</location>
      <description>
        <p>Default accessor for the includable elements of this field. This array
 will populate the Datasource included elements. Fields that have
 different modes will override this and add new items to the array.
 The Symphony convention is element_name : mode. Modes allow Fields to
 output different XML in datasources.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>the array of includable elements from this field.</p></description></tag>
      </tags>
    </method>
    <method name="findDefaults" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="settings" type="array"/>
      </parameters>
      <location line="446">lib/toolkit/class.field.php</location>
      <description>
        <p>Allows a field to set default settings.</p>
      </description>
      <tags>
        <tag group="Parameters" name="settings"><description><p>the array of settings to populate with their defaults.</p></description></tag>
      </tags>
    </method>
    <method name="get" return="null|mixed|array">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="setting" type="string"/>
      </parameters>
      <location line="409">lib/toolkit/class.field.php</location>
      <description>
        <p>Accessor to the a setting by name. If no setting is provided all the
 settings of this Field instance are returned.</p>
      </description>
      <tags>
        <tag group="Parameters" name="setting"><description><p>(optional) the name of the setting to access the value for. This is optional and defaults to null in which case all settings are returned.</p></description></tag>
        <tag group="Returns"><description><p>the value of the setting if there is one, all settings if the input setting was omitted or null if the setting was supplied but there is no value for that setting.</p></description></tag>
      </tags>
    </method>
    <method name="getExampleFormMarkup" return="XMLElement">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="1022">lib/toolkit/class.field.php</location>
      <description>
        <p>The default method for constructing the example form markup containing this
 field when utilized as part of an event. This displays in the event documentation
 and serves as a basic guide for how markup should be constructed on the
 Frontend to save this field</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>a label widget containing the formatted field element name of this.</p></description></tag>
      </tags>
    </method>
    <method name="getParameterPoolValue" return="string">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="data" type="array"/>
      </parameters>
      <location line="986">lib/toolkit/class.field.php</location>
      <description>
        <p>Function to format this field if it chosen in a data-source to be
 output as a parameter in the XML</p>
      </description>
      <tags>
        <tag group="Parameters" name="data"><description><p>The data for this field from it's <code>tbl_entry_data_{id}</code> table</p></description></tag>
        <tag group="Returns"><description><p>The formatted value to be used as the parameter</p></description></tag>
      </tags>
    </method>
    <method name="getToggleStates" return="array">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="193">lib/toolkit/class.field.php</location>
      <description>
        <p>Accessor to the toggle states. This default implementation returns
 an empty array.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>the array of toggle states.</p></description></tag>
      </tags>
    </method>
    <method name="groupRecords" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="records" type="array"/>
      </parameters>
      <location line="971">lib/toolkit/class.field.php</location>
      <description>
        <p>Default implementation of record grouping. This default implementation
 will throw an Exception. Thus, clients must overload this method
 for grouping to be successful.</p>
      </description>
      <tags>
        <tag group="Parameters" name="records"><description><p>the records to group.</p></description></tag>
      </tags>
    </method>
    <method name="handle" return="string">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="319">lib/toolkit/class.field.php</location>
      <description>
        <p>Accessor to the handle of this field object. The Symphony convention is
 for field subclass names to be prefixed with field. Handle removes this prefix
 so that the class handle can be used as the field type.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>The field classname minus the field prefix.</p></description></tag>
      </tags>
    </method>
    <method name="isFilterRegex" return="boolean">
      <modifiers>
        <modifier>protected</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="string" type="string"/>
      </parameters>
      <location line="878">lib/toolkit/class.field.php</location>
      <description>
        <p>Test whether the input string is a regular expression.</p>
      </description>
      <tags>
        <tag group="Parameters" name="string"><description><p>the string to test.</p></description></tag>
        <tag group="Returns"><description><p>true if the string is prefixed with 'regexp:', false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="isSortable" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="257">lib/toolkit/class.field.php</location>
      <description>
        <p>Test whether this field can be sorted. This default implementation
 returns false.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>true if this field is sortable, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="mustBeUnique" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="269">lib/toolkit/class.field.php</location>
      <description>
        <p>Test whether this field must be unique in a section, that is, only one of
 this field's type is allowed per section. This default implementation
 always returns false.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>true if the content of this field must be unique, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="name" return="string">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="332">lib/toolkit/class.field.php</location>
      <description>
        <p>Accessor to the name of this field object. The name may contain characters
 that normally would be stripped in the handle while also allowing the field
 name to be localized. If a name is not set, it will return the handle of the
 the field</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>The field name</p></description></tag>
      </tags>
    </method>
    <method name="prepareTableValue" return="string">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="data" type="array"/>
        <parameter name="link" type="XMLElement" package="toolkit" class="XMLElement"/>
      </parameters>
      <location line="731">lib/toolkit/class.field.php</location>
      <description>
        <p>Format this field value for display in the publish index tables. By default,
 Symphony will truncate the value to the configuration setting <code>cell_truncation_length</code>.
 This function will attempt to use PHP's <code>mbstring</code> functions if they are available.</p>
      </description>
      <tags>
        <tag group="Parameters" name="data"><description><p>an associative array of data for this string. At minimum this requires a key of 'value'.</p></description></tag>
        <tag group="Parameters" name="link"><description><p>(optional) an xml link structure to append the content of this to provided it is not null. it defaults to null.</p></description></tag>
        <tag group="Returns"><description><p>the formatted string summary of the values of this field instance.</p></description></tag>
      </tags>
    </method>
    <method name="processRawFieldData" return="array">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="data" type="mixed"/>
        <parameter name="status" type="integer"/>
        <parameter name="simulate" type="boolean"/>
        <parameter name="entry_id" type="mixed"/>
      </parameters>
      <location line="826">lib/toolkit/class.field.php</location>
      <description>
        <p>Process the raw field data.</p>
      </description>
      <tags>
        <tag group="Parameters" name="data"><description><p>post data from the entry form</p></description></tag>
        <tag group="Parameters" name="status"><description><p>the status code resultant from processing the data.</p></description></tag>
        <tag group="Parameters" name="simulate"><description><p>(optional) true if this will tell the CF's to simulate data creation, false otherwise. this defaults to false. this is important if clients will be deleting or adding data outside of the main entry object commit function.</p></description></tag>
        <tag group="Parameters" name="entry_id"><description><p>(optional) the current entry. defaults to null.</p></description></tag>
        <tag group="Returns"><description><p>the processed field data.</p></description></tag>
      </tags>
    </method>
    <method name="remove" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="setting" type="string"/>
      </parameters>
      <location line="423">lib/toolkit/class.field.php</location>
      <description>
        <p>Unset the value of a setting by the key</p>
      </description>
      <tags>
        <tag group="Parameters" name="setting"><description><p>the key of the setting to unset.</p></description></tag>
      </tags>
    </method>
    <method name="removeSectionAssociation" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="child_field_id" type="integer"/>
      </parameters>
      <location line="1145">lib/toolkit/class.field.php</location>
      <description>
        <p>Permanently remove a section association for this field in the database.</p>
      </description>
      <tags>
        <tag group="Parameters" name="child_field_id"><description><p>the field ID of the linked section's linked field.</p></description></tag>
      </tags>
    </method>
    <method name="requiresSQLGrouping" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="293">lib/toolkit/class.field.php</location>
      <description>
        <p>Test whether this field requires grouping. This default implementation
 returns false.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>true if this field requires grouping, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="set" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="setting" type="string"/>
        <parameter name="value" type="mixed"/>
      </parameters>
      <location line="360">lib/toolkit/class.field.php</location>
      <description>
        <p>Fields have settings that define how that field will act in a section, including
 if it's required, any validators, if it can be shown on the entries tableetc. This
 function will set a setting to a value.  This function will set a setting to a value
 overwriting any existing value for this setting</p>
      </description>
      <tags>
        <tag group="Parameters" name="setting"><description><p>the setting key.</p></description></tag>
        <tag group="Parameters" name="value"><description><p>the value of the setting.</p></description></tag>
      </tags>
    </method>
    <method name="setArray" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="array" type="array"/>
      </parameters>
      <location line="372">lib/toolkit/class.field.php</location>
      <description>
        <p>Add or overwrite the settings of this field by providing an associative array
 of the settings. This will do nothing if the input array is empty. If a setting is
 omitted from the input array, it will not be unset by this function</p>
      </description>
      <tags>
        <tag group="Parameters" name="array"><description><p>the associative array of settings for this field</p></description></tag>
      </tags>
    </method>
    <method name="setFromPOST" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="settings" type="array"/>
      </parameters>
      <location line="389">lib/toolkit/class.field.php</location>
      <description>
        <p>Fill the input data array with default values for known keys provided
 these settings are not already set. The input array is then used to set
 the values of the corresponding settings for this field. This function
 is called when a section is saved.</p>
      </description>
      <tags>
        <tag group="Parameters" name="settings"><description><p>the data array to initialize if necessary.</p></description></tag>
      </tags>
    </method>
    <method name="tearDown" return="boolean">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="436">lib/toolkit/class.field.php</location>
      <description>
        <p>Just prior to the field being deleted, this function allows
 Fields to cleanup any additional things before it is removed
 from the section. This may be useful to remove data from any
 custom field tables or the configuration.</p>
      </description>
      <tags>
        <tag group="Since">Symphony 2.2.1</tag>
      </tags>
    </method>
    <method name="toggleFieldData" return="array">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="data" type="array"/>
        <parameter name="newState" type="string"/>
      </parameters>
      <location line="208">lib/toolkit/class.field.php</location>
      <description>
        <p>Toggle the field data. This default implementation always returns
 the input data.</p>
      </description>
      <tags>
        <tag group="Parameters" name="data"><description><p>the data to toggle.</p></description></tag>
        <tag group="Parameters" name="newState"><description><p>the new value to set</p></description></tag>
        <tag group="Returns"><description><p>the toggled data.</p></description></tag>
      </tags>
    </method>
  </methods>
</class>
