<?xml version="1.0"?>
<class type="class" name="FrontendPage" handle="frontendpage">
  <package name="toolkit" handle="toolkit"/>
  <location line="23">lib/toolkit/class.frontendpage.php</location>
  <modifiers>
    <modifier>public</modifier>
  </modifiers>
  <superclass package="toolkit">XSLTPage</superclass>
  <description>
    <p>The FrontendPage class represents a page of the website that is powered
 by Symphony. It takes the current URL and resolves it to a page as specified
 in Symphony which involves deducing the parameters from the URL, ensuring
 this page is accessible and exists, setting the correct Content-Type for the page
 and executing any Datasources or Events attached to the page to generate a
 string of HTML that is returned to the browser. If the resolved page does not exist
 or the user is not allowed to view it, the appropriate 404/403 page will be shown
 instead.</p>
  </description>
  <fields>
    <field name="$DatasourceManager" type="DatasourceManager">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <location line="42">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>An instance of the DatasourceManager</p>
      </description>
    </field>
    <field name="$EventManager" type="EventManager">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <location line="48">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>An instance of the EventManager</p>
      </description>
    </field>
    <field name="$ExtensionManager" type="ExtensionManager">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <location line="36">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>An instance of the ExtensionManager</p>
      </description>
    </field>
    <field name="$_Parent" type="Frontend" value="null">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <location line="30">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>An instance of the Frontend class</p>
      </description>
      <tags>
        <tag group="See Also" package="core" class="Frontend" path="core.Frontend">core.Frontend</tag>
      </tags>
    </field>
    <field name="$_env" type="array" value="array()">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <location line="104">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>Holds all the environment variables which include parameters set by
 other Datasources or Events.</p>
      </description>
    </field>
    <field name="$_events_xml" type="XMLElement">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <location line="97">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>When events are processed, the results of them often can't be reproduced
 when debugging the page as they happen during <code>$_POST</code>. There is a Symphony
 configuration setting that allows the event results to be appended as a HTML
 comment at the bottom of the page source, so logged in Authors can view-source
 page to see the result of an event. This variable holds the event XML so that it
 can be appended to the page source if <code>display_event_xml_in_source</code> is set to 'yes'.
 By default this is set to no.</p>
      </description>
    </field>
    <field name="$_page" type="string">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <location line="65">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>The URL of the current page that is being Rendered as returned
 by getCurrentPage</p>
      </description>
      <tags>
        <tag group="See Also" package="" class="boot" docblock="getCurrentPage" path="boot#getCurrentPage()">boot#getCurrentPage()</tag>
      </tags>
    </field>
    <field name="$_pageData" type="array">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <location line="74">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>An associative array of the resolved pages's data as returned from <code>tbl_pages</code>
 with the keys mapping to the columns in that table. Additionally, 'file-location'
 and 'type' are also added to this array</p>
      </description>
    </field>
    <field name="$_param" type="array" value="array()">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <location line="56">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>An associative array of all the parameters for this page including
 Symphony parameters, URL Parameters, DS Parameters and Page
 parameters</p>
      </description>
    </field>
    <field name="$is_logged_in" type="boolean" value="false">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <location line="84">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>Returns whether the user accessing this page is logged in as a Symphony
 Author</p>
      </description>
      <tags>
        <tag group="Since">Symphony 2.2.1</tag>
      </tags>
    </field>
  </fields>
  <inherited-fields>
    <class name="XSLTPage" package="toolkit">
      <field name="Proc"/>
      <field name="_param"/>
      <field name="_registered_php_functions"/>
      <field name="_xml"/>
      <field name="_xsl"/>
    </class>
    <class name="Page" package="toolkit">
      <field name="_headers"/>
    </class>
  </inherited-fields>
  <methods>
    <method name="Env" return="array">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="132">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>Accessor function for the environment variables, aka <code>$this-&gt;_env</code></p>
      </description>
    </method>
    <method name="Page" return="string">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="151">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>Accessor function for this current page URL, <code>$this-&gt;_page</code></p>
      </description>
    </method>
    <method name="__buildDatasourcePooledParamList" return="array">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <parameters>
        <parameter name="datasources" type="array"/>
      </parameters>
      <location line="903">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>Given an array of datasource dependancies, this function will translate
 each of them to be a valid datasource handle.</p>
      </description>
      <tags>
        <tag group="Parameters" name="datasources"><description><p>The datasource dependencies</p></description></tag>
        <tag group="Returns"><description><p>An array of the handlised datasources</p></description></tag>
      </tags>
    </method>
    <method name="__buildPage" return="void">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <parameters>
        <parameter name="context" type="string"/>
        <parameter name="output" type="string"/>
      </parameters>
      <location line="310">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>This function sets the page's parameters, processes the Datasources and
 Events and sets the <code>$xml</code> and <code>$xsl</code> variables. This functions resolves the <code>$page</code>
 by calling the <code>resolvePage()</code> function. If a page is not found, it attempts
 to locate the Symphony 404 page set in the backend otherwise it throws
 the default Symphony 404 page. If the page is found, the page's XSL utility
 is found, and the system parameters are set, including any URL parameters,
 params from the Symphony cookies. Events and Datasources are executed and
 any parameters  generated by them are appended to the existing parameters
 before setting the Page's XML and XSL variables are set to the be the
 generated XML (from the Datasources and Events) and the XSLT (from the
 file attached to this Page)</p>
      </description>
      <tags>
        <tag group="Uses" package="" class="FrontendPageResolved" path="FrontendPageResolved">FrontendPageResolved</tag>
        <tag group="Uses" package="" class="FrontendParamsResolve" path="FrontendParamsResolve">FrontendParamsResolve</tag>
        <tag group="Uses" package="" class="FrontendParamsPostResolve" path="FrontendParamsPostResolve">FrontendParamsPostResolve</tag>
        <tag group="See Also" package="" class="resolvePage" path="resolvePage()">resolvePage()</tag>
      </tags>
    </method>
    <method name="__construct" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="parent" type="Frontend" package="core" class="Frontend"/>
      </parameters>
      <location line="115">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>Constructor function sets <code>$this-&gt;_Parent</code> and initialises the Managers
 used on the FrontendPage, which are DatasourceManager, EventManager and
 ExtensionManager</p>
      </description>
      <tags>
        <tag group="Parameters" name="parent"><description><p>The Frontend object that this page has been created from passed by reference</p></description></tag>
      </tags>
    </method>
    <method name="__findDatasourceOrder" return="array">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <parameters>
        <parameter name="dependenciesList" type="array"/>
      </parameters>
      <location line="855">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>The function finds the correct order Datasources need to be processed in to
 satisfy all dependencies that parameters can resolve correctly and in time for
 other Datasources to filter on.</p>
      </description>
      <tags>
        <tag group="Parameters" name="dependenciesList"><description><p>An associative array with the key being the Datasource handle and the values being it's dependencies.</p></description></tag>
        <tag group="Returns"><description><p>The sorted array of Datasources in order of how they should be executed</p></description></tag>
      </tags>
    </method>
    <method name="__findEventOrder" return="integer">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <parameters>
        <parameter name="a" type="Event" package="toolkit" class="Event"/>
        <parameter name="b" type="Event" package="toolkit" class="Event"/>
      </parameters>
      <location line="765">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>This function determines the correct order that events should be executed in.
 Events are executed based off priority, with <code>Event::kHIGH</code> priority executing
 first. If there is more than one Event of the same priority, they are then
 executed in alphabetical order. This function is designed to be used with
 PHP's uasort function.</p>
      </description>
      <tags>
        <tag group="See Also">http://php.net/manual/en/function.uasort.php</tag>
      </tags>
    </method>
    <method name="__isSchemaValid" return="boolean">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <parameters>
        <parameter name="schema" type="string"/>
        <parameter name="bits" type="array"/>
      </parameters>
      <location line="642">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>Given the allowed params for the resolved page, compare it to
 params provided in the URL. If the number of params provided
 is less than or equal to the number of URL parameters set for a page,
 the Schema is considered valid, otherwise, it's considered to be false
 a 404 page will result.</p>
      </description>
      <tags>
        <tag group="Parameters" name="schema"><description><p>The URL schema for a page, ie. article/read</p></description></tag>
        <tag group="Parameters" name="bits"><description><p>The URL parameters provided from parsing the current URL. This does not include any <code>$_GET</code> or <code>$_POST</code> variables.</p></description></tag>
        <tag group="Returns"><description><p>True if the number of $schema (split by /) is less than the size of the $bits array.</p></description></tag>
      </tags>
    </method>
    <method name="fetchPageTypes" return="array">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="page_id" type="integer"/>
      </parameters>
      <location line="622">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>Given a page ID, return it's type from <code>tbl_pages</code></p>
      </description>
      <tags>
        <tag group="Parameters" name="page_id"><description><p>The page ID to find it's type</p></description></tag>
        <tag group="Returns"><description><p>An array of types that this page is set as</p></description></tag>
      </tags>
    </method>
    <method name="generate" return="string">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="page" type="string"/>
      </parameters>
      <location line="173">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>This function is called immediately from the Frontend class passing the current
 URL for generation. Generate will resolve the URL to the specific page in the Symphony
 and then execute all events and datasources registered to this page so that it can
 be rendered. A number of delegates are fired during stages of execution for extensions
 to hook into.</p>
      </description>
      <tags>
        <tag group="Uses" package="" class="FrontendDevKitResolve" path="FrontendDevKitResolve">FrontendDevKitResolve</tag>
        <tag group="Uses" package="" class="FrontendOutputPreGenerate" path="FrontendOutputPreGenerate">FrontendOutputPreGenerate</tag>
        <tag group="Uses" package="" class="FrontendPreRenderHeaders" path="FrontendPreRenderHeaders">FrontendPreRenderHeaders</tag>
        <tag group="Uses" package="" class="FrontendOutputPostGenerate" path="FrontendOutputPostGenerate">FrontendOutputPostGenerate</tag>
        <tag group="See Also" package="" class="__buildPage" path="__buildPage()">__buildPage()</tag>
        <tag group="Parameters" name="page"><description><p>The URL of the current page that is being Rendered as returned by getCurrentPage</p></description></tag>
        <tag group="Returns"><description><p>The page source after the XSLT has transformed this page's XML. This would be exactly the same as the 'view-source' from your browser</p></description></tag>
      </tags>
    </method>
    <method name="pageData" return="array">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="142">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>Accessor function for the resolved page's data (<code>$this-&gt;_pageData</code>)
 as it lies in <code>tbl_pages</code></p>
      </description>
    </method>
    <method name="processDatasources" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="datasources" type="string"/>
        <parameter name="wrapper" type="XMLElement" package="toolkit" class="XMLElement"/>
        <parameter name="params" type="array"/>
      </parameters>
      <location line="796">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>Given an array of all the Datasources for this page, sort them into the
 correct execution order and append the Datasource results to the
 page XML. If the Datasource provides any parameters, they will be
 added to the <code>$env</code> pool for use by other Datasources and eventual
 inclusion into the page parameters.</p>
      </description>
      <tags>
        <tag group="Parameters" name="datasources"><description><p>A string of Datasource's attached to this page, comma separated.</p></description></tag>
        <tag group="Parameters" name="wrapper"><description><p>The XMLElement to append the Datasource results to. Datasource results are contained in a root XMLElement that is the handlised version of their name.</p></description></tag>
        <tag group="Parameters" name="params"><description><p>Any params to automatically add to the <code>$env</code> pool, by default this is an empty array. It looks like Symphony does not utilise this parameter at all</p></description></tag>
      </tags>
    </method>
    <method name="processEvents" return="void">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <parameters>
        <parameter name="events" type="string"/>
        <parameter name="wrapper" type="XMLElement" package="toolkit" class="XMLElement"/>
      </parameters>
      <location line="681">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>The processEvents function executes all Events attached to the resolved
 page in the correct order determined by <code>__findEventOrder()</code>. The results
 from the Events are appended to the page's XML. Events execute first,
 before Datasources.</p>
      </description>
      <tags>
        <tag group="Uses" package="" class="FrontendProcessEvents" path="FrontendProcessEvents">FrontendProcessEvents</tag>
        <tag group="Uses" package="" class="FrontendEventPostProcess" path="FrontendEventPostProcess">FrontendEventPostProcess</tag>
        <tag group="Parameters" name="events"><description><p>A string of all the Events attached to this page, comma separated.</p></description></tag>
        <tag group="Parameters" name="wrapper"><description><p>The XMLElement to append the Events results to. Event results are contained in a root XMLElement that is the handlised version of their name.</p></description></tag>
      </tags>
    </method>
    <method name="resolvePage" return="array">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="page" type="string"/>
      </parameters>
      <location line="505">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>This function attempts to resolve the given page in to it's Symphony page. If no
 page is given, it is assumed the 'index' is being requested. Before a page row is
 returned, it is checked to see that if it has the 'admin' type, that the requesting
 user is authenticated as a Symphony author. If they are not, the Symphony 403
 page is returned (whether that be set as a user defined page using the page type
 of 403, or just returning the Default Symphony 403 error page). Any URL parameters
 set on the page are added to the <code>$env</code> variable before the function returns an
 associative array of page details such as Title, Content Type etc.</p>
      </description>
      <tags>
        <tag group="Uses" package="" class="FrontendPrePageResolve" path="FrontendPrePageResolve">FrontendPrePageResolve</tag>
        <tag group="See Also" package="" class="__isSchemaValid" path="__isSchemaValid()">__isSchemaValid()</tag>
        <tag group="Parameters" name="page"><description><p>The URL of the current page that is being Rendered as returned by <code>getCurrentPage()</code>. If no URL is provided, Symphony assumes the Page with the type 'index' is being requested.</p></description></tag>
        <tag group="Returns"><description><p>An associative array of page details</p></description></tag>
      </tags>
    </method>
    <method name="resolvePageFileLocation" return="string">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="path" type="string"/>
        <parameter name="handle" type="string"/>
      </parameters>
      <location line="662">lib/toolkit/class.frontendpage.php</location>
      <description>
        <p>Resolves the path to this page's XSLT file. The Symphony convention
 is that they are stored in the <code>PAGES</code> folder. If this page has a parent
 it will be as if all the / in the URL have been replaced with _. ie.
 /articles/read/ will produce a file <code>articles_read.xsl</code></p>
      </description>
      <tags>
        <tag group="Parameters" name="path"><description><p>The URL path to this page, excluding the current page. ie, /articles/read would make <code>$path</code> become articles/</p></description></tag>
        <tag group="Parameters" name="handle"><description><p>The handle of the resolved page.</p></description></tag>
        <tag group="Returns"><description><p>The path to the XSLT of this page</p></description></tag>
      </tags>
    </method>
  </methods>
  <inherited-methods package="toolkit" class="Page">
    <class name="XSLTPage" package="toolkit">
      <method name="__construct"/>
      <method name="generate"/>
      <method name="getError"/>
      <method name="getXML"/>
      <method name="getXSL"/>
      <method name="registerPHPFunction"/>
      <method name="setRuntimeParam"/>
      <method name="setXML"/>
      <method name="setXSL"/>
    </class>
    <class name="Page" package="toolkit">
      <method name="__construct"/>
      <method name="__renderHeaders"/>
      <method name="addHeaderToPage"/>
      <method name="generate"/>
      <method name="headers"/>
    </class>
  </inherited-methods>
</class>
