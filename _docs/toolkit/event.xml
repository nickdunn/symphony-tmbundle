<?xml version="1.0"?>
<class type="class" name="Event" handle="event">
  <package name="toolkit" handle="toolkit"/>
  <location line="43">lib/toolkit/class.event.php</location>
  <interfaces>
    <interface package="toolkit">iEvent</interface>
  </interfaces>
  <modifiers>
    <modifier>public</modifier>
    <modifier>abstract</modifier>
  </modifiers>
  <description>
    <p>The abstract Event classes defines some base methods that all Events inherit.
 It has one abstract method, <code>__trigger()</code>, which Events must implement. Event
 execution is determined based on an action (which maps to a form action
 from the Frontend). A load function determines whether this Event matches
 the action and if so, call the Event's <code>__trigger()</code> to run the logic. On every page
 load, all Event's that are attached to the page will have their load function's executed.
 Events are called in order of their priority and if there is more than one event
 with the same priority, in alphabetical order. An event class is saved through the
 Symphony backend, which uses an event template defined in <code>TEMPLATE . /event.tpl</code>
 Events implement the iEvent interface, which defines the load and about functions.</p>
  </description>
  <constants>
    <constant name="CRLF" type="string" value="PHP_EOL">
      <modifiers>
        <modifier>public</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="50">lib/toolkit/class.event.php</location>
      <description>
        <p>The end-of-line constant.</p>
      </description>
      <tags>
        <tag group="Deprecated"><description><p>This will be removed in the next version of Symphony</p></description></tag>
      </tags>
    </constant>
    <constant name="kHIGH" type="integer" value="3">
      <modifiers>
        <modifier>public</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="62">lib/toolkit/class.event.php</location>
      <description>
        <p>Represents High Priority, that this event should run first</p>
      </description>
    </constant>
    <constant name="kLOW" type="integer" value="1">
      <modifiers>
        <modifier>public</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="75">lib/toolkit/class.event.php</location>
      <description>
        <p>Represents High Priority, that this event should run last</p>
      </description>
    </constant>
    <constant name="kNORMAL" type="integer" value="2">
      <modifiers>
        <modifier>public</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="69">lib/toolkit/class.event.php</location>
      <description>
        <p>Represents Normal Priority, that this event should run normally.
 This is the default Event Priority</p>
      </description>
    </constant>
  </constants>
  <fields>
    <field name="$_Parent" type="mixed">
      <modifiers>
        <modifier>protected</modifier>
      </modifiers>
      <location line="56">lib/toolkit/class.event.php</location>
      <description>
        <p>The class that initialised the Entry, usually the EntryManager</p>
      </description>
    </field>
    <field name="$_env" type="array" value="array()">
      <modifiers>
        <modifier>protected</modifier>
      </modifiers>
      <location line="82">lib/toolkit/class.event.php</location>
      <description>
        <p>Holds all the environment variables which include parameters set
 by other Datasources or Events.</p>
      </description>
    </field>
  </fields>
  <methods>
    <method name="__construct" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="parent" type="Administration" package="core" class="Administration"/>
        <parameter name="env" type="array"/>
      </parameters>
      <location line="95">lib/toolkit/class.event.php</location>
      <description>
        <p>The constructor for an Event sets <code>$this-&gt;_Parent</code> and <code>$this-&gt;_env</code>
 from the given parameters</p>
      </description>
      <tags>
        <tag group="Parameters" name="parent"><description><p>The Administration object that this page has been created from passed by reference</p></description></tag>
        <tag group="Parameters" name="env"><description><p>The environment variables from the Frontend class which includes any params set by Symphony or Datasources or by other Events</p></description></tag>
      </tags>
    </method>
    <method name="__trigger" return="mixed">
      <modifiers>
        <modifier>protected</modifier>
        <modifier>abstract</modifier>
      </modifiers>
      <parameters/>
      <location line="162">lib/toolkit/class.event.php</location>
      <description>
        <p>This function must be included in an event. The purpose of this function
 is to define the logic of this particular event. It assumes that this event
 has already been triggered from the load function</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>Typically returns an XMLElement with the event information (success or failure included</p></description></tag>
      </tags>
    </method>
    <method name="allowEditorToParse" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters/>
      <location line="108">lib/toolkit/class.event.php</location>
      <description>
        <p>This function is required in order to edit it in the event editor page.
 Do not overload this function if you are creating a custom event. It is only
 used by the event editor.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>True if event can be edited, false otherwise. Defaults to false</p></description></tag>
      </tags>
    </method>
    <method name="documentation" return="string">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters/>
      <location line="132">lib/toolkit/class.event.php</location>
      <description>
        <p>Returns a HTML string of documentation for the current event. By default this will be
 an example of a HTML form that can populate the chosen section. Documentation is shown
 in the Symphony backend when a user tries to edit an event but it's <code>allowEditorToParse()</code>
 returns <code>false</code>. If this is not implemented by the event, a default Symphony message will
 appear</p>
      </description>
    </method>
    <method name="getSource" return="integer">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters/>
      <location line="119">lib/toolkit/class.event.php</location>
      <description>
        <p>This function is required in order to identify what section this event is for. It
 is used in the event editor. It must remain intact. Do not overload this function in
 custom events.</p>
      </description>
    </method>
    <method name="priority" return="integer">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="149">lib/toolkit/class.event.php</location>
      <description>
        <p>Priority determines Event importance and when it should be executed.
 The default priority for an event is <code>Event::kNORMAL</code>, with <code>Event::kHIGH</code> and
 <code>Event::kLOW</code> being the other available options. Events execution is <code>Event::HIGH</code>
 to <code>Event::kNORMAL</code> to <code>Event::kLOW</code>. If there are more than one event at the
 same priority level, they are sorted alphabetically by event handle and executed
 in that order for that priority.</p>
      </description>
      <tags>
        <tag group="See Also" package="toolkit" class="FrontendPage" docblock="__findEventOrder" path="toolkit.FrontendPage#__findEventOrder()">toolkit.FrontendPage#__findEventOrder()</tag>
        <tag group="Returns"><description><p>The available constants are <code>Event::kLOW</code>, <code>Event::kNORMAL</code> and <code>Event::kHIGH</code>. Defaults to <code>Event::kNORMAL</code></p></description></tag>
      </tags>
    </method>
  </methods>
</class>
