<?xml version="1.0"?>
<class type="class" name="General" handle="general">
  <package name="toolkit" handle="toolkit"/>
  <location line="9">lib/toolkit/class.general.php</location>
  <modifiers>
    <modifier>public</modifier>
  </modifiers>
  <description>
    <p>General is a utility class that offers a number miscellaneous of
 functions that are used throughout Symphony.</p>
  </description>
  <constants>
    <constant name="CRLF" type="string" value="PHP_EOL">
      <modifiers>
        <modifier>public</modifier>
        <modifier>final</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="15">lib/toolkit/class.general.php</location>
      <description>
        <p>The end-of-line constant.</p>
      </description>
      <tags>
        <tag group="Deprecated"><description><p>This will be removed in the next version of Symphony</p></description></tag>
      </tags>
    </constant>
  </constants>
  <methods>
    <method name="array_find_available_index" return="integer">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="array" type="array"/>
        <parameter name="seed" type="mixed"/>
      </parameters>
      <location line="676">lib/toolkit/class.general.php</location>
      <description>
        <p>Find the next available index in an array. Works best with numeric keys.
 The next available index is the minimum integer such that the array does
 not have a mapping for that index. Uses the increment operator on the
 index type of the input array, whatever that may do.</p>
      </description>
      <tags>
        <tag group="Parameters" name="array"><description><p>the array to find the next index for.</p></description></tag>
        <tag group="Parameters" name="seed"><description><p>(optional) the object with which the search for an empty index is initialized. this defaults to null.</p></description></tag>
        <tag group="Returns"><description><p>the minimum empty index into the input array.</p></description></tag>
      </tags>
    </method>
    <method name="array_iunique" return="array">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="array" type="array"/>
      </parameters>
      <location line="737">lib/toolkit/class.general.php</location>
      <description>
        <p>Filter the input array for duplicates, treating each element in the array
 as a string and comparing them using a case insensitive comparison function.</p>
      </description>
      <tags>
        <tag group="Parameters" name="array"><description><p>the array to filter.</p></description></tag>
        <tag group="Returns"><description><p>a new array containing only the unique elements of the input array.</p></description></tag>
      </tags>
    </method>
    <method name="array_map_recursive" return="array">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="function" type="string"/>
        <parameter name="array" type="array"/>
      </parameters>
      <location line="757">lib/toolkit/class.general.php</location>
      <description>
        <p>Function recursively apply a function to an array's values.
 This will not touch the keys, just the values.</p>
      </description>
      <tags>
        <tag group="Since">Symphony 2.2</tag>
        <tag group="Returns"><description><p>a new array with all the values passed through the given <code>$function</code></p></description></tag>
      </tags>
    </method>
    <method name="array_remove_duplicates" return="a">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="array" type="array"/>
        <parameter name="ignore_case" type="boolean"/>
      </parameters>
      <location line="706">lib/toolkit/class.general.php</location>
      <description>
        <p>Filter the duplicate values from an array into a new array, optionally
 ignoring the case of the values (assuming they are strings?). A new array
 is returned, the input array is left unchanged.</p>
      </description>
      <tags>
        <tag group="Parameters" name="array"><description><p>the array to filter.</p></description></tag>
        <tag group="Parameters" name="ignore_case"><description><p>true if the case of the values in the array should be ignored, false otherwise.</p></description></tag>
        <tag group="Returns"><description><p>new array containing only the unique elements of the input array.</p></description></tag>
      </tags>
    </method>
    <method name="array_to_xml" return="void">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="parent" type="XMLElement" package="toolkit" class="XMLElement"/>
        <parameter name="data" type="array"/>
        <parameter name="validate" type="boolean"/>
      </parameters>
      <location line="784">lib/toolkit/class.general.php</location>
      <description>
        <p>Convert an array into an XML fragment and append it to an existing
 XML element. Any arrays contained as elements in the input array will
 also be recursively formatted and appended to the input XML fragment.
 The input XML element will be modified as a result of calling this.</p>
      </description>
      <tags>
        <tag group="Parameters" name="parent"><description><p>the XML element to append the formatted array data to.</p></description></tag>
        <tag group="Parameters" name="data"><description><p>the array to format and append to the XML fragment.</p></description></tag>
        <tag group="Parameters" name="validate"><description><p>true if the formatted array data should be validated as it is constructed, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="buildPaginationElement" return="XMLElement">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="total_entries" type="integer"/>
        <parameter name="total_pages" type="integer"/>
        <parameter name="entries_per_page" type="integer"/>
        <parameter name="current_page" type="integer"/>
      </parameters>
      <location line="1281">lib/toolkit/class.general.php</location>
      <description>
        <p>Construct an XML fragment that describes a pagination structure.</p>
      </description>
      <tags>
        <tag group="Parameters" name="total_entries"><description><p>(optional) the total number of entries that this structure is paginating. this defaults to 0.</p></description></tag>
        <tag group="Parameters" name="total_pages"><description><p>(optional) the total number of pages within the pagination structure. this defaults to 0.</p></description></tag>
        <tag group="Parameters" name="entries_per_page"><description><p>(optional) the number of entries per page. this defaults to 1.</p></description></tag>
        <tag group="Parameters" name="current_page"><description><p>(optional) the current page within the total number of pages within this pagination structure. this defaults to 1.</p></description></tag>
        <tag group="Returns"><description><p>the constructed XML fragment.</p></description></tag>
      </tags>
    </method>
    <method name="cleanArray" return="void">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="arr" type="mixed"/>
        <parameter name="&amp;$arr" type="array"/>
      </parameters>
      <location line="182">lib/toolkit/class.general.php</location>
      <description>
        <p>Strip any slashes from all array values.</p>
      </description>
      <tags>
        <tag group="Parameters" name="&amp;$arr"><description><p>Pointer to an array to operate on. Can be multi-dimensional.</p></description></tag>
      </tags>
    </method>
    <method name="countWords" return="integer">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="string" type="string"/>
      </parameters>
      <location line="1102">lib/toolkit/class.general.php</location>
      <description>
        <p>Count the number of words in a string. Words are delimited by "spaces".
 The characters included in the set of "spaces" are:
    '&#x2002;', '&#x2003;', '&#x2004;', '&#x2005;',
    '&#x2006;', '&#x2007;', '&#x2009;', '&#x200A;',
    '&#x200B;', '&#x2002F;', '&#x205F;'
 Any html/xml tags are first removed by strip_tags() and any included html
 entities are decoded. The resulting string is then split by the above set
 of spaces and the resulting size of the resulting array returned.</p>
      </description>
      <tags>
        <tag group="Parameters" name="string"><description><p>the string from which to count the contained words.</p></description></tag>
        <tag group="Returns"><description><p>the number of words contained in the input string.</p></description></tag>
      </tags>
    </method>
    <method name="createFilename" return="string">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="string" type="string"/>
        <parameter name="delim" type="string"/>
      </parameters>
      <location line="426">lib/toolkit/class.general.php</location>
      <description>
        <p>Given a string, this will clean it for use as a filename. Preserves multi-byte characters.</p>
      </description>
      <tags>
        <tag group="Since">Symphony 2.2.1</tag>
        <tag group="Parameters" name="string"><description><p>String to be cleaned up</p></description></tag>
        <tag group="Parameters" name="delim"><description><p>Replacement for invalid characters</p></description></tag>
        <tag group="Returns"><description><p>Returns created filename</p></description></tag>
      </tags>
    </method>
    <method name="createHandle" return="string">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="string" type="string"/>
        <parameter name="max_length" type="int"/>
        <parameter name="delim" type="string"/>
        <parameter name="uriencode" type="boolean"/>
        <parameter name="additional_rule_set" type="array"/>
      </parameters>
      <location line="375">lib/toolkit/class.general.php</location>
      <description>
        <p>Given a string, this will clean it for use as a Symphony handle. Preserves multi-byte characters.</p>
      </description>
      <tags>
        <tag group="Since">Symphony 2.2.1</tag>
        <tag group="Parameters" name="string"><description><p>String to be cleaned up</p></description></tag>
        <tag group="Parameters" name="max_length"><description><p>The maximum number of characters in the handle</p></description></tag>
        <tag group="Parameters" name="delim"><description><p>All non-valid characters will be replaced with this</p></description></tag>
        <tag group="Parameters" name="uriencode"><description><p>Force the resultant string to be uri encoded making it safe for URLs</p></description></tag>
        <tag group="Parameters" name="additional_rule_set"><description><p>An array of REGEX patterns that should be applied to the <code>$string</code>. This occurs after the string has been trimmed and joined with the <code>$delim</code></p></description></tag>
        <tag group="Returns"><description><p>Returns resultant handle</p></description></tag>
      </tags>
    </method>
    <method name="createXMLDateObject" return="boolean|XMLElement">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="timestamp" type="integer"/>
        <parameter name="element" type="string"/>
        <parameter name="namespace" type="string"/>
      </parameters>
      <location line="1248">lib/toolkit/class.general.php</location>
      <description>
        <p>Construct an XML fragment that reflects the structure of the input timestamp.</p>
      </description>
      <tags>
        <tag group="Parameters" name="timestamp"><description><p>the timestamp to construct the XML element from.</p></description></tag>
        <tag group="Parameters" name="element"><description><p>(optional) the name of the element to append to the namespace of the constructed XML. this defaults to "date".</p></description></tag>
        <tag group="Parameters" name="namespace"><description><p>(optional) the namespace in which the resulting XML entity will reside. this defaults to null.</p></description></tag>
        <tag group="Returns"><description><p>false if there is no XMLElement class on the system, the constructed XML element otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="deleteFile" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="file" type="string"/>
        <parameter name="slient" type="bool"/>
        <parameter name="silent" type="boolean"/>
      </parameters>
      <location line="878">lib/toolkit/class.general.php</location>
      <description>
        <p>Delete a file at a given path, silently ignoring errors depending
 on the value of the input variable $silent.</p>
      </description>
      <tags>
        <tag group="Parameters" name="file"><description><p>the path of the file to delete</p></description></tag>
        <tag group="Parameters" name="silent"><description><p>(optional) true if an exception should be raised if an error occurs, false otherwise. this defaults to true.</p></description></tag>
        <tag group="Returns"><description><p>true if the file is successfully unlinked, if the unlink fails and silent is set to true then an exception is thrown. if the unlink fails and silent is set to false then this returns false.</p></description></tag>
      </tags>
    </method>
    <method name="fileSort" return="integer">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="f1" type="array"/>
        <parameter name="f2" type="array"/>
      </parameters>
      <location line="1066">lib/toolkit/class.general.php</location>
      <description>
        <p>Compare two file structure arrays based on their name. Names are
 compared alphabetically. Should only be used in the context of a
 sort function such as usort. For example:
 <code>usort($files, array('General', 'fileSort'));</code></p>
      </description>
      <tags>
        <tag group="Parameters" name="f1"><description><p>the first file structure array to compare.</p></description></tag>
        <tag group="Parameters" name="f2"><description><p>the second file structure array to compare <code>$f1</code> to.</p></description></tag>
        <tag group="Returns"><description><p>&lt;1, 0, &gt;1 if <code>$f1</code> is less than, equal to or greater than <code>$f2</code>.</p></description></tag>
      </tags>
    </method>
    <method name="fileSortR" return="integer">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="f1" type="array"/>
        <parameter name="f2" type="array"/>
      </parameters>
      <location line="1083">lib/toolkit/class.general.php</location>
      <description>
        <p>Compare two file structure arrays based on their name. Names are compared
 alphabetically reversed. For example "z" is less than "a". Should only
 be used in the context of a sort function such as usort. For example:
 <code>usort($files, array('General', 'fileSortR'));</code></p>
      </description>
      <tags>
        <tag group="Parameters" name="f1"><description><p>the first file structure array to compare.</p></description></tag>
        <tag group="Parameters" name="f2"><description><p>the second file structure array to compare <code>$f1</code> to.</p></description></tag>
        <tag group="Returns"><description><p>&lt;1, 0, &gt;1 if <code>$f2</code> is less than, equal to or greater than <code>$f1</code>.</p></description></tag>
      </tags>
    </method>
    <method name="filemtimeSort" return="integer">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="f1" type="array"/>
        <parameter name="f2" type="array"/>
      </parameters>
      <location line="1049">lib/toolkit/class.general.php</location>
      <description>
        <p>Compare two file structures based on their modification time. Should only
 be used in the context of a sort function such as usort. For example:
 <code>usort($files, array('General', 'filemtimeSort'));</code></p>
      </description>
      <tags>
        <tag group="Parameters" name="f1"><description><p>the first file structure array to compare.</p></description></tag>
        <tag group="Parameters" name="f2"><description><p>the second file structure array to compare <code>$f1</code> to.</p></description></tag>
        <tag group="Returns"><description><p>&lt;1, 0, &gt;1 if <code>$f1</code> is less than, equal to or greater than <code>$f2</code>.</p></description></tag>
      </tags>
    </method>
    <method name="flattenArray" return="void">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="source" type="mixed"/>
        <parameter name="output" type="mixed"/>
        <parameter name="path" type="string"/>
        <parameter name="&amp;$source" type="array"/>
        <parameter name="&amp;$output" type="array"/>
      </parameters>
      <location line="217">lib/toolkit/class.general.php</location>
      <description>
        <p>Flatten the input array. Any elements of the input array that are
 themselves arrays will be removed and the contents of the removed array
 inserted in its place. The keys for the inserted values will be the
 concatenation of the keys in the original arrays in which it was embedded.
 The elements of the path are separated by periods (.). For example,
 given the following nested array structure:
 <code>array(1 =&gt;
            array('key' =&gt; 'value'),
        2 =&gt;
            array('key2' =&gt; 'value2', 'key3' =&gt; 'value3')
        )</code>
 will flatten to:
 <code>array('1.key' =&gt; 'value', '2.key2' =&gt; 'value2', '2.key3' =&gt; 'value3')</code></p>
      </description>
      <tags>
        <tag group="Parameters" name="&amp;$source"><description><p>The array to flatten, passed by reference</p></description></tag>
        <tag group="Parameters" name="&amp;$output"><description><p>(optional) The array in which to store the flattened input, passed by reference. if this is not provided then a new array will be created.</p></description></tag>
        <tag group="Parameters" name="path"><description><p>(optional) the current prefix of the keys to insert into the output array. this defaults to null.</p></description></tag>
      </tags>
    </method>
    <method name="flattenArraySub" return="void">
      <modifiers>
        <modifier>protected</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="output" type="mixed"/>
        <parameter name="source" type="mixed"/>
        <parameter name="path" type="string"/>
        <parameter name="&amp;$output" type="array"/>
        <parameter name="&amp;$source" type="array"/>
      </parameters>
      <location line="256">lib/toolkit/class.general.php</location>
      <description>
        <p>Flatten the input array. Any elements of the input array that are
 themselves arrays will be removed and the contents of the removed array
 inserted in its place. The keys for the inserted values will be the
 concatenation of the keys in the original arrays in which it was embedded.
 The elements of the path are separated by colons (:). For example, given
 the following nested array structure:
 <code>array(1 =&gt;
            array('key' =&gt; 'value'),
        2 =&gt;
            array('key2' =&gt; 'value2', 'key3' =&gt; 'value3')
        )</code>
 will flatten to:
 <code>array('1:key' =&gt; 'value', '2:key2' =&gt; 'value2', '2:key3' =&gt; 'value3')</code></p>
      </description>
      <tags>
        <tag group="Parameters" name="&amp;$output"><description><p>The array in which to store the flattened input, passed by reference.</p></description></tag>
        <tag group="Parameters" name="&amp;$source"><description><p>The array to flatten, passed by reference</p></description></tag>
        <tag group="Parameters" name="path"><description><p>the current prefix of the keys to insert into the output array.</p></description></tag>
      </tags>
    </method>
    <method name="formatFilesize" return="string">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="file_size" type="integer"/>
      </parameters>
      <location line="1222">lib/toolkit/class.general.php</location>
      <description>
        <p>Format a number of bytes in human readable format. This will append MB as
 appropriate for values greater than 1,024<em>1,024, KB for values between
 1,024 and 1,024</em>1,024-1 and bytes for values between 0 and 1,024.</p>
      </description>
      <tags>
        <tag group="Parameters" name="file_size"><description><p>the number to format.</p></description></tag>
        <tag group="Returns"><description><p>the formatted number.</p></description></tag>
      </tags>
    </method>
    <method name="generatePassword" return="string">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters/>
      <location line="273">lib/toolkit/class.general.php</location>
      <description>
        <p>Create friendly passwords such as 4LargeWorms or 11HairyMonkeys. This
 uses the rand() function. Thus, if the random number generated is seeded
 appropriately, this function will return the same password consistently.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>the generated password.</p></description></tag>
      </tags>
    </method>
    <method name="getExtension" return="array">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="file" type="string"/>
      </parameters>
      <location line="900">lib/toolkit/class.general.php</location>
      <description>
        <p>Extract the file extension from the input file path.</p>
      </description>
      <tags>
        <tag group="Parameters" name="file"><description><p>the path of the file to extract the extension of.</p></description></tag>
        <tag group="Returns"><description><p>an array with a single key 'extension' and a value of the extension of the input path.</p></description></tag>
      </tags>
    </method>
    <method name="getPostData" return="array">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters/>
      <location line="626">lib/toolkit/class.general.php</location>
      <description>
        <p>Merge <code>$_POST</code> with <code>$_FILES</code> to produce a flat array of the contents
 of both. If there is no merge<em>file</em>post_data function defined then
 such a function is created. This is necessary to overcome PHP's ability
 to handle forms. This overcomes PHP's convoluted <code>$_FILES</code> structure
 to make it simpler to access multi-part/formdata.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>a flat array containing the flattened contents of both <code>$_POST</code> and <code>$_FILES</code>.</p></description></tag>
      </tags>
    </method>
    <method name="hash" return="string">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="input" type="string"/>
        <parameter name="algorithm" type="string"/>
      </parameters>
      <location line="1306">lib/toolkit/class.general.php</location>
      <description>
        <p>Uses SHA1 or MD5 to create a hash based on some input
 This function is currently very basic, but would allow
 future expansion. Salting the hash comes to mind.</p>
      </description>
      <tags>
        <tag group="Parameters" name="input"><description><p>the string to be hashed</p></description></tag>
        <tag group="Parameters" name="algorithm"><description><p>a valid PHP function handle</p></description></tag>
        <tag group="Returns"><description><p>the hashed string</p></description></tag>
      </tags>
    </method>
    <method name="in_array_all" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="needles" type="array"/>
        <parameter name="haystack" type="array"/>
      </parameters>
      <location line="574">lib/toolkit/class.general.php</location>
      <description>
        <p>Search an array for multiple values.</p>
      </description>
      <tags>
        <tag group="Parameters" name="needles"><description><p>the values to search the <code>$haystack</code> for.</p></description></tag>
        <tag group="Parameters" name="haystack"><description><p>the in which to search for the <code>$needles</code></p></description></tag>
        <tag group="Returns"><description><p>true if any of the <code>$needles</code> are in <code>$haystack</code>, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="in_array_multi" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="needle" type="mixed"/>
        <parameter name="haystack" type="array"/>
      </parameters>
      <location line="543">lib/toolkit/class.general.php</location>
      <description>
        <p>Search a multi-dimensional array for a value.</p>
      </description>
      <tags>
        <tag group="Parameters" name="needle"><description><p>the value to search for.</p></description></tag>
        <tag group="Parameters" name="haystack"><description><p>the multi-dimensional array to search.</p></description></tag>
        <tag group="Returns"><description><p>true if <code>$needle</code> is found in <code>$haystack</code>. true if <code>$needle</code> == <code>$haystack</code>. true if <code>$needle</code> is found in any of the arrays contained within <code>$haystack</code>. false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="in_iarray" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="needle" type="mixed"/>
        <parameter name="haystack" type="array"/>
      </parameters>
      <location line="721">lib/toolkit/class.general.php</location>
      <description>
        <p>Test whether a value is in an array based on string comparison, ignoring
 the case of the values.</p>
      </description>
      <tags>
        <tag group="Parameters" name="needle"><description><p>the object to search the array for.</p></description></tag>
        <tag group="Parameters" name="haystack"><description><p>the array to search for the <code>$needle</code>.</p></description></tag>
        <tag group="Returns"><description><p>true if the <code>$needle</code> is in the <code>$haystack</code>, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="left" return="string|boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="str" type="string"/>
        <parameter name="num" type="integer"/>
      </parameters>
      <location line="509">lib/toolkit/class.general.php</location>
      <description>
        <p>Extract the first <code>$num</code> characters from a string.</p>
      </description>
      <tags>
        <tag group="Parameters" name="str"><description><p>the string to extract the characters from.</p></description></tag>
        <tag group="Parameters" name="num"><description><p>the number of characters to extract.</p></description></tag>
        <tag group="Returns"><description><p>a string containing the last <code>$num</code> characters of the input string, or false on failure.</p></description></tag>
      </tags>
    </method>
    <method name="limitWords" return="null|string">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="string" type="string"/>
        <parameter name="maxChars" type="integer"/>
        <parameter name="appendHellip" type="boolean"/>
      </parameters>
      <location line="1149">lib/toolkit/class.general.php</location>
      <description>
        <p>Truncate a string to a given length. Newlines are replaced with <code>&lt;br /&gt;</code>
 html elements and html tags are removed from the string. If the resulting
 string contains only spaces then null is returned. If the resulting string
 is less than the input length then it is returned. If the option to
 truncate the string to a space character is provided then the string is
 truncated to the character prior to the last space in the string. Words
 (contiguous non-' ' characters) are then removed from the end of the string
 until the length of resulting string is within the input bound. Initial
 and trailing spaces are removed. Provided the user requested an
 ellipsis suffix and the resulting string is shorter than the input string
 then the ellipses are appended to the result which is then returned.</p>
      </description>
      <tags>
        <tag group="Parameters" name="string"><description><p>the string to truncate.</p></description></tag>
        <tag group="Parameters" name="maxChars"><description><p>(optional) the maximum length of the string to truncate the input string to. this defaults to 200 characters.</p></description></tag>
        <tag group="Parameters" name="appendHellip"><description><p>(optional) true if the ellipses should be appended to the result in circumstances where the result is shorter than the input string. false otherwise. this defaults to false.</p></description></tag>
        <tag group="Returns"><description><p>if the resulting string contains only spaces then null is returned. otherwise a string that satisfies the input constraints.</p></description></tag>
      </tags>
    </method>
    <method name="listDirStructure" return="null|array">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="dir" type="string"/>
        <parameter name="filter" type="string"/>
        <parameter name="recurse" type="boolean"/>
        <parameter name="strip_root" type="mixed"/>
        <parameter name="exclude" type="array"/>
        <parameter name="ignore_hidden" type="boolean"/>
      </parameters>
      <location line="929">lib/toolkit/class.general.php</location>
      <description>
        <p>Construct a multi-dimensional array that reflects the directory
 structure of a given path.</p>
      </description>
      <tags>
        <tag group="Parameters" name="dir"><description><p>(optional) the path of the directory to construct the multi-dimensional array for. this defaults to '.'.</p></description></tag>
        <tag group="Parameters" name="filter"><description><p>(optional) A regular expression to filter the directories. This is positive filter, ie. if the filter matches, the directory is included. Defaults to null.</p></description></tag>
        <tag group="Parameters" name="recurse"><description><p>(optional) true if sub-directories should be traversed and reflected in the resulting array, false otherwise.</p></description></tag>
        <tag group="Parameters" name="strip_root"><description><p>(optional) null if the <code>$dir</code> should be stripped from the entries in the array. anything else if <code>$dir</code> should be retained. this defaults to null.</p></description></tag>
        <tag group="Parameters" name="exclude"><description><p>(optional) ignore directories listed in this array. this defaults to an empty array.</p></description></tag>
        <tag group="Parameters" name="ignore_hidden"><description><p>(optional) ignore hidden directory (i.e.directories that begin with a period). this defaults to true.</p></description></tag>
        <tag group="Returns"><description><p>return the array structure reflecting the input directory or null if the input directory is not actually a directory.</p></description></tag>
      </tags>
    </method>
    <method name="listStructure" return="null|array">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="dir" type="string"/>
        <parameter name="filters" type="array|string"/>
        <parameter name="sort" type="string"/>
        <parameter name="strip_root" type="mixed"/>
        <parameter name="exclude" type="array"/>
        <parameter name="recurse" type="boolean"/>
        <parameter name="ignore_hidden" type="boolean"/>
      </parameters>
      <location line="985">lib/toolkit/class.general.php</location>
      <description>
        <p>Construct a multi-dimensional array that reflects the directory
 structure of a given path grouped into directory and file keys
 matching any input constraints.</p>
      </description>
      <tags>
        <tag group="Parameters" name="dir"><description><p>(optional) the path of the directory to construct the multi-dimensional array for. this defaults to '.'.</p></description></tag>
        <tag group="Parameters" name="filters"><description><p>(optional) either a regular expression to filter the files by or an array of files to include.</p></description></tag>
        <tag group="Parameters" name="recurse"><description><p>(optional) true if sub-directories should be traversed and reflected in the resulting array, false otherwise.</p></description></tag>
        <tag group="Parameters" name="sort"><description><p>(optional) 'asc' if the resulting filelist array should be sorted, anything else otherwise. this defaults to 'asc'.</p></description></tag>
        <tag group="Parameters" name="strip_root"><description><p>(optional) null if the <code>$dir</code> should be stripped from the entries in the array. anything else if <code>$dir</code> should be retained. this defaults to null.</p></description></tag>
        <tag group="Parameters" name="exclude"><description><p>(optional) ignore files listed in this array. this defaults to an empty array.</p></description></tag>
        <tag group="Parameters" name="ignore_hidden"><description><p>(optional) ignore hidden files (i.e. files that begin with a period). this defaults to true.</p></description></tag>
        <tag group="Returns"><description><p>return the array structure reflecting the input directory or null if the input directory is not actually a directory.</p></description></tag>
      </tags>
    </method>
    <method name="processFilePostData" return="array">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="filedata" type="array"/>
      </parameters>
      <location line="592">lib/toolkit/class.general.php</location>
      <description>
        <p>Transform a multi-dimensional array to a flat array. The input array
 is expected to conform to the structure of the <code>$_FILES</code> variable.</p>
      </description>
      <tags>
        <tag group="Parameters" name="filedata"><description><p>the raw <code>$_FILES</code> data structured array</p></description></tag>
        <tag group="Returns"><description><p>the flattened array.</p></description></tag>
      </tags>
    </method>
    <method name="realiseDirectory" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="path" type="string"/>
        <parameter name="mode" type="integer"/>
      </parameters>
      <location line="524">lib/toolkit/class.general.php</location>
      <description>
        <p>Create all the directories as specified by the input path. If the current
 directory already exists, this function will return true.</p>
      </description>
      <tags>
        <tag group="Parameters" name="path"><description><p>the path containing the directories to create.</p></description></tag>
        <tag group="Parameters" name="mode"><description><p>(optional) the permissions (in octal) of the directories to create. Defaults to 0755</p></description></tag>
      </tags>
    </method>
    <method name="reverse_sanitize" return="string">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="str" type="string"/>
      </parameters>
      <location line="39">lib/toolkit/class.general.php</location>
      <description>
        <p>Revert any html entities to their character equivalents.</p>
      </description>
      <tags>
        <tag group="Parameters" name="str"><description><p>a string to operate on</p></description></tag>
        <tag group="Returns"><description><p>the decoded version of the string</p></description></tag>
      </tags>
    </method>
    <method name="right" return="string|boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="str" type="string"/>
        <parameter name="num" type="integer"/>
      </parameters>
      <location line="493">lib/toolkit/class.general.php</location>
      <description>
        <p>Extract the last <code>$num</code> characters from a string.</p>
      </description>
      <tags>
        <tag group="Parameters" name="str"><description><p>the string to extract the characters from.</p></description></tag>
        <tag group="Parameters" name="num"><description><p>the number of characters to extract.</p></description></tag>
        <tag group="Returns"><description><p>a string containing the last <code>$num</code> characters of the input string, or false on failure.</p></description></tag>
      </tags>
    </method>
    <method name="sanitize" return="string">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="source" type="string"/>
      </parameters>
      <location line="25">lib/toolkit/class.general.php</location>
      <description>
        <p>Convert any special characters into their entity equivalents.</p>
      </description>
      <tags>
        <tag group="Parameters" name="source"><description><p>a string to operate on.</p></description></tag>
        <tag group="Returns"><description><p>the encoded version of the string.</p></description></tag>
      </tags>
    </method>
    <method name="sendEmail" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="to_email" type="string"/>
        <parameter name="from_email" type="string"/>
        <parameter name="from_name" type="string"/>
        <parameter name="subject" type="string"/>
        <parameter name="message" type="string"/>
        <parameter name="additional_headers" type="array"/>
      </parameters>
      <location line="330">lib/toolkit/class.general.php</location>
      <description>
        <p>Allows you to send emails. It initializes the core email class.</p>
      </description>
      <tags>
        <tag group="Deprecated"><description><p>Since Symphony 2.2</p></description></tag>
        <tag group="Parameters" name="to_email"><description><p>email of the recipient</p></description></tag>
        <tag group="Parameters" name="from_email"><description><p>the from email address. This is usually your email</p></description></tag>
        <tag group="Parameters" name="from_name"><description><p>the name of the sender</p></description></tag>
        <tag group="Parameters" name="subject"><description><p>subject of the email</p></description></tag>
        <tag group="Parameters" name="message"><description><p>contents of the email</p></description></tag>
        <tag group="Parameters" name="additional_headers"><description><p>an array containing additional email headers. This will NOT work for Content-Type header fields which will be added/overwritten by the email gateways.)</p></description></tag>
        <tag group="Returns"><description><p>true on success</p></description></tag>
      </tags>
    </method>
    <method name="substrmax" return="string|boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="str" type="string"/>
        <parameter name="val" type="integer"/>
      </parameters>
      <location line="478">lib/toolkit/class.general.php</location>
      <description>
        <p>Extract the first <code>$val</code> characters of the input string. If
 <code>$val</code> is larger than the length of the input string then
 the original input string is returned</p>
      </description>
      <tags>
        <tag group="Parameters" name="str"><description><p>the string to operate on</p></description></tag>
        <tag group="Parameters" name="val"><description><p>the number to compare lengths with</p></description></tag>
        <tag group="Returns"><description><p>the resulting string or false on failure.</p></description></tag>
      </tags>
    </method>
    <method name="substrmin" return="string|boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="str" type="string"/>
        <parameter name="val" type="integer"/>
      </parameters>
      <location line="462">lib/toolkit/class.general.php</location>
      <description>
        <p>Extract the first <code>$val</code> characters of the input string. If <code>$val</code>
 is larger than the length of the input string then the original
 input string is returned.</p>
      </description>
      <tags>
        <tag group="Parameters" name="str"><description><p>the string to operate on</p></description></tag>
        <tag group="Parameters" name="val"><description><p>the number to compare lengths with</p></description></tag>
        <tag group="Returns"><description><p>the resulting string or false on failure.</p></description></tag>
      </tags>
    </method>
    <method name="tabsToSpaces" return="string">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="string" type="string"/>
        <parameter name="spaces" type="integer"/>
      </parameters>
      <location line="81">lib/toolkit/class.general.php</location>
      <description>
        <p>Replace the tabs with spaces in the input string.</p>
      </description>
      <tags>
        <tag group="Parameters" name="string"><description><p>the string in which to replace the tabs with spaces.</p></description></tag>
        <tag group="Parameters" name="spaces"><description><p>(optional) the number of spaces to replace each tab with. This argument is optional with a default of 4.</p></description></tag>
        <tag group="Returns"><description><p>the resulting string.</p></description></tag>
      </tags>
    </method>
    <method name="uploadFile" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="dest_path" type="string"/>
        <parameter name="dest_name" type="mixed"/>
        <parameter name="tmp_name" type="string"/>
        <parameter name="perm" type="integer"/>
        <parameter name="#dest_name" type="string"/>
      </parameters>
      <location line="1193">lib/toolkit/class.general.php</location>
      <description>
        <p>Move a file from the source path to the destination path and name and
 set its permissions to the input permissions. This will ignore errors
 in the is<em>uploaded</em>file(), move<em>uploaded</em>file() and chmod() functions.</p>
      </description>
      <tags>
        <tag group="Parameters" name="dest_path"><description><p>the file path to which the source file is to be moved.</p></description></tag>
        <tag group="Parameters" name="#dest_name"><description><p>the file name within the file path to which the source file is to be moved.</p></description></tag>
        <tag group="Parameters" name="tmp_name"><description><p>the full path name of the source file to move.</p></description></tag>
        <tag group="Parameters" name="perm"><description><p>(optional) the permissions to apply to the moved file. this defaults to 0777.</p></description></tag>
        <tag group="Returns"><description><p>true if the file was moved and its permissions set as required. false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="validateString" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="string" type="array|string"/>
        <parameter name="rule" type="array|string"/>
      </parameters>
      <location line="54">lib/toolkit/class.general.php</location>
      <description>
        <p>Validate a string against a set of regular expressions.</p>
      </description>
      <tags>
        <tag group="Parameters" name="string"><description><p>string to operate on</p></description></tag>
        <tag group="Parameters" name="rule"><description><p>a single rule or array of rules</p></description></tag>
        <tag group="Returns"><description><p>false if any of the rules in $rule do not match any of the strings in <code>$string</code>, return true otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="validateURL" return="string">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="url" type="string"/>
      </parameters>
      <location line="161">lib/toolkit/class.general.php</location>
      <description>
        <p>Check that a string is a valid URL.</p>
      </description>
      <tags>
        <tag group="Parameters" name="url"><description><p>string to operate on</p></description></tag>
        <tag group="Returns"><description><p>a blank string or a valid URL</p></description></tag>
      </tags>
    </method>
    <method name="validateXML" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="data" type="string"/>
        <parameter name="errors" type="mixed"/>
        <parameter name="isFile" type="boolean"/>
        <parameter name="xsltProcessor" type="mixed"/>
        <parameter name="encoding" type="string"/>
        <parameter name="&amp;$errors" type="pointer"/>
      </parameters>
      <location line="104">lib/toolkit/class.general.php</location>
      <description>
        <p>Checks an xml document for well-formedness.</p>
      </description>
      <tags>
        <tag group="Parameters" name="data"><description><p>filename, xml document as a string, or arbitrary string</p></description></tag>
        <tag group="Parameters" name="&amp;$errors"><description><p>pointer to an array which will contain any validation errors</p></description></tag>
        <tag group="Parameters" name="isFile"><description><p>(optional) if this is true, the method will attempt to read from a file, <code>$data</code> instead.</p></description></tag>
        <tag group="Parameters" name="xsltProcessor"><description><p>(optional) if set, the validation will be done using this XSLT processor rather than the built in XML parser. the default is null.</p></description></tag>
        <tag group="Parameters" name="encoding"><description><p>(optional) if no XML header is expected, than this should be set to match the encoding of the XML</p></description></tag>
        <tag group="Returns"><description><p>true if there are no errors in validating the XML, false otherwise.</p></description></tag>
      </tags>
    </method>
    <method name="writeFile" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="file" type="string"/>
        <parameter name="data" type="mixed"/>
        <parameter name="perm" type="integer|null"/>
        <parameter name="mode" type="string"/>
      </parameters>
      <location line="834">lib/toolkit/class.general.php</location>
      <description>
        <p>Create a file at the input path with the (optional) input permissions
 with the input content. This function will ignore errors in opening,
 writing, closing and changing the permissions of the resulting file.
 If opening or writing the file fail then this will return false.</p>
      </description>
      <tags>
        <tag group="Parameters" name="file"><description><p>the path of the file to write.</p></description></tag>
        <tag group="Parameters" name="data"><description><p>the data to write to the file.</p></description></tag>
        <tag group="Parameters" name="perm"><description><p>(optional) the permissions as an octal number to set set on the resulting file. this defaults to 0644 (if omitted or set to null)</p></description></tag>
        <tag group="Parameters" name="mode"><description><p>(optional) the mode that the file should be opened with, defaults to 'w'. See modes at http://php.net/manual/en/function.fopen.php</p></description></tag>
        <tag group="Returns"><description><p>true if the file is successfully opened, written to, closed and has the required permissions set. false, otherwise.</p></description></tag>
      </tags>
    </method>
  </methods>
</class>
