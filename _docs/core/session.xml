<?xml version="1.0"?>
<class type="class" name="Session" handle="session">
  <package name="core" handle="core"/>
  <location line="20">lib/core/class.session.php</location>
  <modifiers>
    <modifier>public</modifier>
  </modifiers>
  <description>
    <p>The Session class is a handler for all Session related logic in PHP. The functions
 map directly to all handler functions as defined by session<em>set</em>save_handler in
 PHP. In Symphony, this function is used in conjunction with the <code>Cookie</code> class.
 Based on: http://php.net/manual/en/function.session-set-save-handler.php#81761
 by klose at openriverbed dot de which was based on
 http://php.net/manual/en/function.session-set-save-handler.php#79706 by
 maria at junkies dot jp</p>
  </description>
  <tags>
    <tag group="See Also">http://php.net/manual/en/function.session-set-save-handler.php</tag>
  </tags>
  <fields>
    <field name="$_cache" type="Cacheable" value="null">
      <modifiers>
        <modifier>private</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="41">lib/core/class.session.php</location>
      <description>
        <p>An instance of the Cacheable class</p>
      </description>
    </field>
    <field name="$_initialized" type="boolean" value="false">
      <modifiers>
        <modifier>private</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="27">lib/core/class.session.php</location>
      <description>
        <p>If a Session has been created, this will be true, otherwise false</p>
      </description>
    </field>
    <field name="$_registered" type="boolean" value="false">
      <modifiers>
        <modifier>private</modifier>
        <modifier>static</modifier>
      </modifiers>
      <location line="34">lib/core/class.session.php</location>
      <description>
        <p>False until a shutdown function is registered, true after that</p>
      </description>
    </field>
  </fields>
  <methods>
    <method name="close" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters/>
      <location line="146">lib/core/class.session.php</location>
      <description>
        <p>Allows the Session to close without any further logic. Acts as a
 destructor function for the Session.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>Always returns true</p></description></tag>
      </tags>
    </method>
    <method name="destroy" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="id" type="string"/>
      </parameters>
      <location line="206">lib/core/class.session.php</location>
      <description>
        <p>Given a session's ID, remove it's row from <code>tbl_sessions</code></p>
      </description>
      <tags>
        <tag group="Parameters" name="id"><description><p>The identifier for the Session to destroy</p></description></tag>
        <tag group="Returns"><description><p>True if the Session was deleted successfully, false otherwise</p></description></tag>
      </tags>
    </method>
    <method name="gc" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="max" type="integer"/>
      </parameters>
      <location line="225">lib/core/class.session.php</location>
      <description>
        <p>The garbage collector, which removes all empty Sessions, or any
 Sessions that have expired. This has a 10% chance of firing based
 off the <code>gc_probability</code>/<code>gc_divisor</code>.</p>
      </description>
      <tags>
        <tag group="Parameters" name="max"><description><p>The max session lifetime.</p></description></tag>
        <tag group="Returns"><description><p>True on Session deletion, false if an error occurs</p></description></tag>
      </tags>
    </method>
    <method name="getDomain" return="string|null">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters/>
      <location line="110">lib/core/class.session.php</location>
      <description>
        <p>Returns the current domain for the Session to be saved to, if the installation
 is on localhost, this returns null and just allows PHP to take care of setting
 the valid domain for the Session, otherwise it will return the non-www version
 of the domain host.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>Null if on localhost, or HTTP_HOST is not set, a string of the domain name sans www otherwise</p></description></tag>
      </tags>
    </method>
    <method name="open" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters/>
      <location line="130">lib/core/class.session.php</location>
      <description>
        <p>Called when a Session is created, registers the close function</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>Always returns true</p></description></tag>
      </tags>
    </method>
    <method name="read" return="string">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="id" type="string"/>
      </parameters>
      <location line="188">lib/core/class.session.php</location>
      <description>
        <p>Given a session's ID, return it's row from <code>tbl_sessions</code></p>
      </description>
      <tags>
        <tag group="Parameters" name="id"><description><p>The identifier for the Session to fetch</p></description></tag>
        <tag group="Returns"><description><p>The serialised session data</p></description></tag>
      </tags>
    </method>
    <method name="start" return="string|boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="lifetime" type="integer"/>
        <parameter name="path" type="string"/>
        <parameter name="domain" type="string"/>
        <parameter name="httpOnly" type="boolean"/>
      </parameters>
      <location line="63">lib/core/class.session.php</location>
      <description>
        <p>Starts a Session object, only if one doesn't already exist. This function maps
 the Session Handler functions to this classes methods by reading the default
 information from the PHP ini file.</p>
      </description>
      <tags>
        <tag group="See Also">http://php.net/manual/en/function.session-set-save-handler.php</tag>
        <tag group="See Also">http://php.net/manual/en/function.session-set-cookie-params.php</tag>
        <tag group="Parameters" name="lifetime"><description><p>How long a Session is valid for, by default this is 0, which means it never expires</p></description></tag>
        <tag group="Parameters" name="path"><description><p>The path the cookie is valid for on the domain</p></description></tag>
        <tag group="Parameters" name="domain"><description><p>The domain this cookie is valid for</p></description></tag>
        <tag group="Parameters" name="httpOnly"><description><p>Whether this cookie can be read by Javascript. By default the cookie can be read using Javascript and PHP</p></description></tag>
        <tag group="Returns"><description><p>Returns the Session ID on success, or false on error.</p></description></tag>
      </tags>
    </method>
    <method name="write" return="boolean">
      <modifiers>
        <modifier>public</modifier>
        <modifier>static</modifier>
      </modifiers>
      <parameters>
        <parameter name="id" type="string"/>
        <parameter name="data" type="string"/>
      </parameters>
      <location line="164">lib/core/class.session.php</location>
      <description>
        <p>Given an ID, and some data, save it into <code>tbl_sessions</code>. This uses
 the ID as a unique key, and will override any existing data. If the
 <code>$data</code> is deemed to be empty, no row will be saved in the database
 unless there is an existing row.</p>
      </description>
      <tags>
        <tag group="Parameters" name="id"><description><p>The ID of the Session, usually a hash</p></description></tag>
        <tag group="Parameters" name="data"><description><p>The Session information, usually a serialized object of <code>$_SESSION[Cookie-&gt;_index]</code></p></description></tag>
        <tag group="Returns"><description><p>True if the Session information was saved successfully, false otherwise</p></description></tag>
      </tags>
    </method>
  </methods>
</class>
