<?xml version="1.0"?>
<class type="class" name="Cookie" handle="cookie">
  <package name="core" handle="core"/>
  <location line="16">lib/core/class.cookie.php</location>
  <modifiers>
    <modifier>public</modifier>
  </modifiers>
  <description>
    <p>The Cookie class is a wrapper to save Symphony cookies. Typically this
 is used to maintain if an Author is logged into Symphony, or by extensions
 to determine similar things. The Cookie class is tightly integrated with
 PHP's <code>$_SESSION</code> global and it's related functions.</p>
  </description>
  <fields>
    <field name="$_domain" type="string">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <location line="61">lib/core/class.cookie.php</location>
      <description>
        <p>The domain that this cookie is valid for. This is null by default which implies
 the entire domain and all subdomains created will have access to this cookie.</p>
      </description>
    </field>
    <field name="$_httpOnly" type="boolean" value="false">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <location line="70">lib/core/class.cookie.php</location>
      <description>
        <p>Determines whether this cookie can be read by Javascript or not, by default
 this is set to false, meaning cookies written by Symphony can be read by
 Javascript</p>
      </description>
    </field>
    <field name="$_index" type="string" value="null">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <location line="26">lib/core/class.cookie.php</location>
      <description>
        <p>Used to prevent Symphony cookies from completely polluting the
 <code>$_SESSION</code> array. This will act as a key and all
 cookies will live under that key. By default, the index is read from
 the Symphony configuration, and unless changed, is <code>sym-</code></p>
      </description>
    </field>
    <field name="$_path" type="string">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <location line="53">lib/core/class.cookie.php</location>
      <description>
        <p>The path that this cookie is valid for, by default Symphony makes this the whole
 domain using</p>
      </description>
    </field>
    <field name="$_session" type="Session|boolean" value="false">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <location line="37">lib/core/class.cookie.php</location>
      <description>
        <p>This variable determines if the Cookie was set by the Symphony Session
 class, or if it was set directly. By default, this is false as the Symphony cookie
 created directly in the Symphony constructor, otherwise it will be an instance
 of the Session class</p>
      </description>
      <tags>
        <tag group="See Also" package="core" class="Symphony" docblock="__construct" path="core.Symphony#__construct()">core.Symphony#__construct()</tag>
      </tags>
    </field>
    <field name="$_timeout" type="integer">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <location line="45">lib/core/class.cookie.php</location>
      <description>
        <p>How long this cookie is valid for. By default, this is 0 if used by an extension,
 but it is usually set for 2 weeks in the Symphony context.</p>
      </description>
    </field>
  </fields>
  <methods>
    <method name="__construct" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="index" type="string"/>
        <parameter name="timeout" type="integer"/>
        <parameter name="path" type="string"/>
        <parameter name="domain" type="string"/>
        <parameter name="httpOnly" type="boolean"/>
      </parameters>
      <location line="92">lib/core/class.cookie.php</location>
      <description>
        <p>Constructor for the Cookie class intialises all class variables with the
 given parameters. Most of the parameters map to PHP's setcookie
 function. It creates a new Session object via the <code>$this-&gt;__init()</code></p>
      </description>
      <tags>
        <tag group="See Also" package="" class="__init" path="__init()">__init()</tag>
        <tag group="See Also">http://php.net/manual/en/function.setcookie.php</tag>
        <tag group="Parameters" name="index"><description><p>The prefix to used to namespace all Symphony cookies</p></description></tag>
        <tag group="Parameters" name="timeout"><description><p>The Time to Live for a cookie, by default this is zero, meaning the cookie never expires</p></description></tag>
        <tag group="Parameters" name="path"><description><p>The path the cookie is valid for on the domain</p></description></tag>
        <tag group="Parameters" name="domain"><description><p>The domain this cookie is valid for</p></description></tag>
        <tag group="Parameters" name="httpOnly"><description><p>Whether this cookie can be read by Javascript. By default the cookie can be read using Javascript and PHP</p></description></tag>
      </tags>
    </method>
    <method name="__init" return="Session">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <parameters/>
      <location line="106">lib/core/class.cookie.php</location>
      <description>
        <p>Initialises a new Session instance using this cookie's params</p>
      </description>
    </method>
    <method name="expire" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="153">lib/core/class.cookie.php</location>
      <description>
        <p>Expires the current <code>$_SESSION</code> by unsetting the Symphony
 namespace (<code>$this-&gt;_index</code>). If the <code>$_SESSION</code>
 is empty, the function will destroy the entire <code>$_SESSION</code></p>
      </description>
      <tags>
        <tag group="See Also">http://au2.php.net/manual/en/function.session-destroy.php</tag>
      </tags>
    </method>
    <method name="get" return="string|null">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="name" type="string"/>
      </parameters>
      <location line="139">lib/core/class.cookie.php</location>
      <description>
        <p>Accessor function for properties in the <code>$_SESSION</code> array</p>
      </description>
      <tags>
        <tag group="Parameters" name="name"><description><p>The name of the property to retrieve</p></description></tag>
        <tag group="Returns"><description><p>The value of the property, or null if it does not exist</p></description></tag>
      </tags>
    </method>
    <method name="set" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="name" type="string"/>
        <parameter name="value" type="string"/>
      </parameters>
      <location line="127">lib/core/class.cookie.php</location>
      <description>
        <p>A basic setter, which will set a value to a given property in the
 <code>$_SESSION</code> array, stored in the key of <code>$this-&gt;_index</code></p>
      </description>
      <tags>
        <tag group="Parameters" name="name"><description><p>The name of the property</p></description></tag>
        <tag group="Parameters" name="value"><description><p>The value of the property</p></description></tag>
      </tags>
    </method>
  </methods>
</class>
