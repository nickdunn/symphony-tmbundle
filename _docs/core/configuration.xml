<?xml version="1.0"?>
<class type="class" name="Configuration" handle="configuration">
  <package name="core" handle="core"/>
  <location line="15">lib/core/class.configuration.php</location>
  <modifiers>
    <modifier>public</modifier>
  </modifiers>
  <description>
    <p>The Configuration class acts as a property =&gt; value store for settings
 used throughout Symphony. The result of this class is a string containing
 a PHP representation of the properties (and their values) set by the Configuration.
 Symphony's configuration file is saved at <code>CONFIG</code>. The initial
 file is generated by the Symphony installer, and then subsequent use of Symphony
 loads in this file for each page view. Like minded properties can be grouped.</p>
  </description>
  <fields>
    <field name="$_forceLowerCase" type="boolean" value="false">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <location line="28">lib/core/class.configuration.php</location>
      <description>
        <p>Whether all properties and group keys will be forced to be lowercase.
 By default this is false, which makes all properties case sensitive</p>
      </description>
    </field>
    <field name="$_properties" type="array" value="array()">
      <modifiers>
        <modifier>private</modifier>
      </modifiers>
      <location line="21">lib/core/class.configuration.php</location>
      <description>
        <p>An associative array of the properties for this Configuration object</p>
      </description>
    </field>
  </fields>
  <methods>
    <method name="__construct" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="forceLowerCase" type="boolean"/>
      </parameters>
      <location line="40">lib/core/class.configuration.php</location>
      <description>
        <p>The constructor for the Configuration class takes one parameter,
 <code>$forceLowerCase</code> which will make all property and
 group names lowercase or not. By default they are left to the case
 the user provides</p>
      </description>
      <tags>
        <tag group="Parameters" name="forceLowerCase"><description><p>False by default, if true this will make all property and group names lowercase</p></description></tag>
      </tags>
    </method>
    <method name="__toString" return="string">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="157">lib/core/class.configuration.php</location>
      <description>
        <p>The magic __toString function converts the internal <code>$this-&gt;_properties</code>
 array into a string representation. Symphony generates the <code>MANIFEST/config.php</code>
 file in this manner. All values are run through PHP's addslashes before saving.</p>
      </description>
      <tags>
        <tag group="Returns"><description><p>A string that contains a PHP representation of <code>$this-&gt;_properties</code>. This is used by Symphony to write as a file that is then read at a later date.</p></description></tag>
      </tags>
    </method>
    <method name="flush" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters/>
      <location line="144">lib/core/class.configuration.php</location>
      <description>
        <p>Empties all the Configuration values by setting <code>$this-&gt;_properties</code>
 to an empty array</p>
      </description>
    </method>
    <method name="get" return="array|string">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="name" type="string"/>
        <parameter name="group" type="string"/>
      </parameters>
      <location line="100">lib/core/class.configuration.php</location>
      <description>
        <p>Accessor function for the <code>$this-&gt;_properties</code>. If the
 <code>$name</code> is provided, the resulting value will be run through
 PHP's stripslashes.</p>
      </description>
      <tags>
        <tag group="Parameters" name="name"><description><p>The name of the property to retrieve</p></description></tag>
        <tag group="Parameters" name="group"><description><p>The group that this property will be in</p></description></tag>
        <tag group="Returns"><description><p>If <code>$name</code> or <code>$group</code> are not provided this function will return the full <code>$this-&gt;_properties</code> array.</p></description></tag>
      </tags>
    </method>
    <method name="remove" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="name" type="string"/>
        <parameter name="group" type="string"/>
      </parameters>
      <location line="126">lib/core/class.configuration.php</location>
      <description>
        <p>The remove function will unset a property by <code>$name</code>.
 It is possible to remove an entire 'group' by passing the group
 name as the <code>$name</code></p>
      </description>
      <tags>
        <tag group="Parameters" name="name"><description><p>The name of the property to unset. This can also be the group name</p></description></tag>
        <tag group="Parameters" name="group"><description><p>The group of the property to unset</p></description></tag>
      </tags>
    </method>
    <method name="set" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="name" type="string"/>
        <parameter name="value" type="string"/>
        <parameter name="group" type="string"/>
      </parameters>
      <location line="57">lib/core/class.configuration.php</location>
      <description>
        <p>Setter for the <code>$this-&gt;_properties</code>. The properties array
 can be grouped to be an 'array' of an 'array' of properties. For instance
 a 'region' key may be an array of 'properties' (that is name/value), or it
 may be a 'value' itself.</p>
      </description>
      <tags>
        <tag group="Parameters" name="name"><description><p>The name of the property to set, eg 'timezone'</p></description></tag>
        <tag group="Parameters" name="value"><description><p>The value for the property to set, eg. '+10:00'</p></description></tag>
        <tag group="Parameters" name="group"><description><p>The group for this property, eg. 'region'</p></description></tag>
      </tags>
    </method>
    <method name="setArray" return="void">
      <modifiers>
        <modifier>public</modifier>
      </modifiers>
      <parameters>
        <parameter name="array" type="array"/>
      </parameters>
      <location line="81">lib/core/class.configuration.php</location>
      <description>
        <p>A quick way to set a large number of properties. Given an array that may
 contain 'property' =&gt; 'value' or 'group' =&gt; array('property' =&gt; 'value') or
 a combination of both, this will PHP's array_merge with <code>$this-&gt;_properties</code></p>
      </description>
      <tags>
        <tag group="Parameters" name="array"><description><p>An associative array of properties, 'property' =&gt; 'value' or 'group' =&gt; array( 'property' =&gt; 'value'</p></description></tag>
      </tags>
    </method>
  </methods>
</class>
